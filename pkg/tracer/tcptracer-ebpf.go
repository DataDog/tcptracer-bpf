// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\x7f\x6c\x9b\xc7\x79\xbe\x8f\x14\xad\x1f\x89\x23\xd5\x29\x13\x99\x5b\x31\x65\x0d\x12\x57\x6d\x52\x51\x96\x6d\x45\x6b\x57\xc5\x69\x1a\x55\x08\x20\x2e\xb0\x1a\xcd\x68\x46\xb1\x2c\x6d\xc9\x74\x6c\x5a\xa4\x23\x7d\x61\xb6\xb9\x2b\xdc\x79\x42\x57\xc8\x6e\x36\x28\x46\x36\x88\xb2\x92\xa8\x5b\xb0\x18\xd8\x50\xfb\x8f\x62\x14\x8a\x0c\x13\x8a\x0e\xd3\x86\xac\x50\x01\x77\xd0\xb6\xac\x50\x07\x6c\x50\x86\xcc\x53\x8d\x6c\x1c\x78\xef\x73\xfc\xbe\x7b\xbf\xfb\x3e\x52\x89\xdb\x11\x48\x5e\xdf\x73\x77\xef\x7b\x3f\xde\x7b\xef\xb9\xfb\xce\xfe\xed\xc7\x9f\xfc\x5c\xc8\xb2\x84\xfa\x59\xf8\x8f\xff\x12\x87\x9d\x3f\x0f\xe2\xff\xbf\x20\x2c\x51\xbe\x87\xb0\xf3\x42\x88\xbb\x84\x10\xc5\xb6\xad\x4a\x35\x6d\xa7\x72\x12\x2f\xc6\xb6\x65\xba\xbc\x48\xe5\x9a\x43\x42\x6c\x55\x2a\x95\xf2\x15\xa4\xc3\x42\x6c\x57\x2a\x95\x4e\x66\xf4\x5a\x93\xa3\x37\x54\x4d\x03\xff\x03\x48\xfb\xde\x04\xb3\x3b\x24\xed\x5c\x83\x9e\x62\x6c\xd0\x63\x77\xc8\x60\xe7\x3c\xfa\x1b\x15\xf7\xca\x1c\x7b\x17\xe1\x8d\xd4\x0b\x0b\x21\x8e\x37\x0b\xd1\x25\x84\x98\x86\x1c\x6d\xbe\xcb\xe2\xf5\x07\x03\xec\x96\x9b\x29\x1d\x6d\x6e\x26\xfb\x67\x90\xb6\x22\x94\x5e\xe4\xfd\xea\xa1\xf1\xcd\xa3\x5c\x78\x4c\xb6\x63\x34\x5c\x91\xfa\xec\x33\x2d\xd4\xfe\xbb\x29\xff\x8d\x8f\x92\xec\x0c\x09\x51\xa9\x54\x2a\xca\xfe\x43\x1f\xfd\x29\x8d\x73\x2b\xf4\x5e\xde\xac\x90\xdc\x80\x5c\x87\x5c\x83\x5c\x85\x5c\x81\xbc\x0e\x79\x15\x72\x19\x72\x01\x72\x1e\x72\x0e\xf2\x02\xe4\x39\xc8\x19\xc8\x1c\xe4\x04\xf5\x33\x44\xf3\x5d\xec\xa6\x74\x31\x46\xf9\xf6\x99\x0e\xf4\x9f\xea\xd9\x53\x9d\x94\xee\xde\x47\xe5\xba\xcf\x01\xef\x02\xde\x05\x9c\xec\xda\xb9\x7d\x84\xb7\x51\x7b\xec\xb3\x3d\x94\x3e\x4a\xed\xb4\x0b\xfd\xe4\x57\x33\xe4\xdd\xc5\x59\xf4\x67\x98\xfa\x63\xcf\x0c\x51\xfe\x54\x02\xfa\xd1\xff\xd9\xab\xda\xb8\xa4\xa6\x0a\x32\x3f\xdd\x7d\x03\xed\x99\x41\x9a\xc6\xb5\xfc\x31\x1a\xef\xe9\x56\xf2\x97\xec\xe5\xb7\x25\x3e\x1d\x12\xa2\xda\xa2\x6c\xf7\x8f\xa1\x27\x87\x7a\x34\x0f\x93\x53\xe7\x64\x3a\xdb\xbd\x89\xfc\x2f\xcb\xf4\xf1\x10\xe9\x49\xd9\xe3\x32\x3d\x72\x89\xf4\xa7\xec\x09\x92\xf9\x93\x54\x2e\x4c\xe5\x46\xbe\x89\xf9\x1e\xc0\xbc\x76\xd3\xbc\x66\xac\xb4\x1c\xf7\xa8\xf5\x5b\xf0\xbf\x17\x69\x5d\x58\x96\xc4\x23\xe2\xcf\x85\xdb\x0f\xb3\xb1\xa7\x64\xbd\xf6\xaf\x51\xba\x5c\x22\x59\xf5\xe2\xa7\x2a\x95\x8a\x9a\xc7\x72\x9a\xf0\xaa\xbf\x57\x97\xf4\x64\x89\xea\x65\x63\xd4\x8f\x88\x58\xa0\x7e\xc6\xfa\x2b\x6e\xff\x4e\xc7\xc6\x20\xdf\x43\xf9\x23\x90\x37\x51\x6e\x02\xf9\xdb\xf0\x0f\xf2\x07\x65\xaf\xfd\x6e\x6f\xbb\xc6\xd0\xae\x26\x57\x7b\xec\x33\x5d\x75\xeb\xbd\x67\xac\xb7\xaf\x6e\xbd\x23\xae\x71\x70\xea\xf5\xd4\xad\x77\xd3\x58\x8f\xfc\xb3\xfd\x1e\x6f\xf9\x09\x94\x6f\x31\x8c\xb7\x7d\x86\xfc\xd9\xbe\x42\xe3\x65\xb2\xb7\x6d\xe8\x5f\x6a\x09\xe3\x3f\x4c\xf3\x91\xba\x42\xf3\x90\x1e\xe8\x23\x7f\x5c\xc4\x7c\x74\xd3\xbc\x4d\x96\x6e\x62\x7e\x06\xa8\xfc\x2b\x34\x2f\xe9\xa3\x9f\x92\x32\xda\x94\xd5\xfc\x70\x1a\x32\x1a\x26\x3f\x7d\x5a\xc6\x27\x21\xa2\xa1\x63\x94\xb6\x90\xb6\xc8\xcf\xed\xd2\x90\x36\xef\x4e\x3c\x9c\xd1\xe2\x84\xbb\x5f\x39\xf4\xab\x03\xfd\xea\x60\x71\xb9\x87\xed\x43\x13\x86\x38\x1d\x11\x4f\x49\x19\xb5\x1e\x94\x71\x36\x6a\x7d\x5a\x8e\x4f\x75\x5d\x44\x64\x3e\xc5\x03\xd5\x9e\x34\xfc\xb4\x08\xff\x6d\xff\x9c\xbf\x1f\x06\xcf\xd7\x98\xef\x7c\x1d\x31\xcc\xd7\x71\x81\x71\x85\xac\xf6\xe3\x3f\x5d\xf1\xfe\x99\x8e\x78\xad\x9d\x96\x6c\xdf\x0a\xd6\x5f\x0f\x6b\x3f\xcd\xb3\x5d\xa2\xb8\x6a\xf2\x37\xf7\x7a\xe0\xed\x4f\x95\xe0\x27\xb1\x1b\xd0\x7f\xbf\xa6\x5f\xad\xdf\xf6\x5d\x5e\xbd\x37\x03\xe3\x86\xf2\xaf\xb7\xa1\x77\x2f\x6b\x37\xe2\x40\xa9\xcb\xb7\xdd\xdb\x81\xed\x86\xbf\xc6\x36\xa0\x7f\x37\x6b\xf7\x31\xd2\xfb\x05\xaf\xde\x63\x81\xed\x3e\x86\x76\xff\x18\x7a\x43\x32\x3f\x55\x3a\x02\x7b\xeb\x1e\x9e\xd2\x88\x5f\xd6\xe3\x47\xff\x6f\xbc\xac\x93\xf3\xb2\x04\x5b\xaf\x43\x1e\xbb\x89\x20\x7e\x04\x3f\x89\xee\xba\xd3\xc3\xab\xfc\xea\x55\xd7\xa9\x7d\x0c\xe3\xd0\x20\xff\x73\x78\x18\x2d\x19\x87\x87\xfd\x0f\xa5\x4b\x89\x1a\x3f\x11\x2e\x7e\x61\x4f\xa1\x5c\xe8\x8b\xc4\xc3\x42\xff\x4d\x3c\x6c\x0a\x3c\x0c\xfc\xeb\x0d\xac\xe3\x4e\x8b\xf1\xb0\xbb\xdf\x11\xfa\xf8\x80\x77\xc5\xb0\x3f\xc7\xc0\xbb\xb0\x5e\x8b\x31\xf0\x8e\x18\x78\x47\x0c\x3c\x25\x06\xde\x15\x03\xef\x8a\x81\x77\xc5\xc0\xbb\x62\xe0\x5d\x2c\x5e\xaa\x78\x5a\x8c\x8d\x6b\x71\xeb\x5a\x18\x3c\x6c\x60\x0c\x3c\x61\x1c\xfd\x25\x1e\x66\xe7\xc1\xbf\x06\xa0\x07\x7c\xcd\xce\xd3\x7e\x6a\x17\xc0\xb7\x86\x61\x77\x00\xbc\x2d\xdf\x83\xfc\x7e\xe4\xa3\x9d\x03\xe0\x69\x79\xc4\xbf\xc2\x10\xf2\xd1\xaf\x01\xf0\xb4\x3c\xf8\xd7\xc0\xb2\x36\x0e\xa9\x02\x78\xd7\xf0\xf7\xc1\xe7\xc0\xbb\x86\x69\x1c\xcb\x8f\xd3\xf8\x4e\x47\xc0\xbb\x8e\xbe\x45\xbc\xab\x09\xbc\x6b\xf8\x07\xd0\x03\xde\x35\x4c\xe3\x3e\x59\x00\xef\x1a\x5e\x47\x3e\xf8\x54\x13\x78\xd7\x59\xda\xbf\x46\x8e\x60\xfe\x86\xc1\x03\x0b\xc4\xc7\x52\x67\xc1\xd3\x60\x77\x04\xed\x28\x1e\x55\xf3\xa8\xf3\x9e\xd1\xd0\x1b\xa2\xea\xf2\xe5\xd7\xa8\x5c\x73\xb3\x10\xd7\x2b\x95\x4a\xfb\x41\x4a\xbb\xe3\x4e\x8f\x6b\x7f\xf3\xec\x23\x25\xe8\xbd\xb7\x05\xfe\xdb\x83\x34\xf4\xb8\xd6\x45\x17\x5b\xf7\x63\xc6\x7d\xf0\x32\xf5\xa3\x05\xfb\x0c\xe4\x68\xcb\x4b\xcc\x7f\x1b\xf3\x2f\xd5\xdf\x62\x0c\x3c\x3d\xb6\x05\xb9\x89\x78\x79\x0b\x72\x1b\xf8\x86\xc6\x07\xed\x33\xe4\x07\x9c\x47\x55\xdb\xdf\xe1\x33\x4e\x2d\xda\x3e\xeb\x5f\xbf\x93\xd5\xef\xda\x41\x7d\x77\xbd\xad\x1d\xda\x6d\x61\xf5\x37\x8d\xf5\xeb\xf3\xce\x5b\xef\x93\x77\x6e\xef\x90\x77\x6e\x34\xc4\x63\x36\x7c\x79\x8c\x91\x57\x7f\x0b\x7e\x71\x99\xfc\xc4\x7e\x15\xfe\x71\x82\xfc\xa7\x9c\xa2\xfa\x23\x17\x49\xda\xaf\xc1\x6f\x9e\x47\xfc\x59\xc6\x39\x76\x96\xfc\x6f\x72\x09\x7e\x34\x3c\x03\xde\xba\x0d\xde\xfa\x3c\xe3\xb5\x2f\x10\x4f\xb5\x3e\x43\x7e\x3c\xd0\x49\xf6\xbe\x02\x7b\xb5\xfd\xe0\x57\xa8\x1f\x8f\x52\xda\xe1\xa9\x34\x4e\xe5\xfb\x38\x7e\x80\xf4\x0d\xb7\x20\x4e\x76\xb0\xfd\x70\xd0\x18\x07\xd4\x7e\xa3\xd2\xee\x71\xeb\x37\xf0\xda\xd1\x56\xda\x28\xd5\xf8\x1c\xb7\xb0\x4e\x21\x3b\xe5\xbe\xe5\xec\x3b\x1f\xb9\x8f\x36\xbc\xd1\x66\xe2\x51\xaa\x9f\xf5\xea\x3d\x73\x1f\x4d\xe4\xf4\x2e\xca\x4f\x9f\xa0\xf9\x51\xf1\x20\x3d\x7b\x3f\xda\x4f\xfd\xbd\x61\x51\xfb\xb2\xb1\x7d\xc0\x3b\x18\xde\x0d\xbc\x13\xeb\xfb\x13\x1e\x7e\xc0\xe3\x53\x8f\x31\x3e\xa1\xff\xae\x7a\x63\x0d\xd4\xdb\x09\x8f\x6a\x91\x7c\x66\x90\xcd\x1f\xed\x0b\xf6\x71\xda\x07\xec\x89\x9c\xa7\x1d\xeb\x41\xbc\x03\xf7\x2f\xd1\xd6\x27\x64\x09\xef\x7d\xd2\x67\xe5\xed\x9c\x0d\x7f\x1f\xb5\x0e\x5b\x61\x03\x9f\xca\x62\x1f\x6c\xfc\xbe\x8b\x88\x8c\x8d\xfc\xa8\xb5\x5b\xdc\x1e\xbd\x61\xcc\x87\x60\xfa\xcf\xcb\x9c\x88\xe8\xa6\x7b\x2d\x8b\xf6\xf7\xf2\x57\x29\xdf\x14\x1f\xae\x1a\xe2\xd1\x64\x89\xda\x33\x6a\xfd\x5b\x25\xa4\xf1\x7f\x9d\xff\xa4\xd1\xee\x34\xf6\x95\x2c\xf6\x8f\x2c\xf6\x0f\xd5\xbf\x34\xf6\x1b\xfb\x62\x67\xc3\xed\xd1\xe2\xd5\xc5\xae\xba\xf5\xb6\x8c\xf5\xf6\xd5\xad\xb7\x61\x8a\xc7\x17\x7b\xea\xd6\x7b\xcf\x58\x0f\x71\xbc\xd3\x5b\x7e\xc8\x1d\xc7\xbf\xea\xcc\x27\xd5\x53\x71\x7c\xc8\x37\x8e\x6f\x1a\xef\x0f\x30\xfe\xc3\xf3\x88\xb3\x5b\x88\xb3\x2f\x23\x0e\x63\x3e\xba\x69\xde\x26\x4b\xea\x9e\x67\x91\xca\xbf\x42\xf3\x92\x3e\xba\x44\x71\xb9\xe9\x5f\xa4\x3d\xef\xfd\xc1\x86\xc4\x9d\xfb\x83\x7f\xa4\x74\x2d\xfe\xde\xa0\xf6\xba\xfc\x77\x3e\xd0\x7f\x7f\x20\xd3\xce\x3a\x30\xf3\x6e\x93\x5f\x48\xde\x10\xd6\xc7\xef\x3c\xd6\x82\xba\x9f\xb6\xaf\x50\xfc\xe0\xfd\x28\x0e\x38\xe7\x24\xcb\x75\xff\x95\x2a\xfd\x05\xfc\xf4\x8b\x48\x2b\xff\xce\x21\xfd\x32\xd2\x05\xa4\x69\x3c\xcb\x7b\xa8\x1d\x37\xb0\x4f\x64\xbb\x69\xff\x9b\x46\xdc\x75\xe2\x2f\xf6\xc1\xd2\x12\xf4\xbc\x80\x78\xbc\xa2\xf1\x37\xbb\x74\x5d\xe3\x71\xe5\x25\xf4\xbf\x89\xfc\x47\xed\x3b\x9d\x21\x7d\x5c\xaf\x45\x84\xe8\xc7\x38\xec\x6d\x60\x1e\x22\xe2\x15\xf2\xb7\x0f\x1c\x1f\xfe\x48\xb4\x69\xf3\xd8\xe8\x79\x6a\x48\x8b\x23\x3b\xe6\xa5\x17\x13\xc6\x76\x9b\x78\xe9\x90\x89\xdf\x05\xd4\xe7\xbc\x74\x7e\x07\xf5\xeb\xf2\xd2\x00\xbb\x0d\xf1\xd2\x06\xe2\x99\x91\x97\x36\x10\xcf\x8c\xbc\x34\x20\x9e\x6d\x34\x14\xcf\x76\xc8\x4b\x6b\xf7\x8f\xe4\x27\xf6\x2b\xf0\x0f\x9c\xe3\x46\xa2\x02\x7a\xe1\x2f\x03\xe4\x5f\xf6\x12\xf8\xa8\x3a\x4f\x2e\xc2\x7f\xba\xd7\x10\xf7\xc0\x47\x63\x7f\x4f\xeb\x70\x01\x7c\xb4\x8d\xce\xa7\xd1\xc8\x67\xa5\xde\x91\x3e\xd2\x1f\x6d\xa2\x0f\x71\x4e\xbc\xa3\xfe\x38\xf1\xee\x57\xa9\x3f\xae\x75\x76\x35\x30\xde\xd1\x38\x3a\xeb\xc4\x7c\x9f\x60\xf2\xbb\x9f\x4d\xbc\x7b\x59\x8b\x77\x36\xd6\xb3\xbd\x88\x75\xda\xad\x9f\x2f\x55\x9c\xb2\x17\xb1\xae\xbb\xf5\xfb\x0e\xbb\xb4\xe6\x13\x0f\xe9\xde\x81\xf3\xdb\xf2\x87\x49\x26\xe9\xda\x52\xde\x0f\xc8\x78\x09\x99\x1d\xbe\x54\x8b\xa3\x92\xef\xc6\x5e\x84\x9d\x65\x16\x2f\x17\xde\x77\xbc\x4c\xf8\xc4\x4b\xbf\x79\x0c\x07\xf0\x56\xce\x53\x9d\x7b\xb9\xfe\x5a\x5a\xae\x13\xba\x26\x10\xf6\xe4\x0e\xf9\x6b\xed\xde\xac\xa0\x7d\xbf\x1c\xb5\xa6\x24\x4f\x2d\x9e\xc0\xf9\x05\xdf\x89\xae\xc1\x4e\x71\x96\xe6\x2b\x3d\x4b\x7e\xae\xce\x99\x65\x7c\x9f\x32\xad\xcb\x55\xe3\x79\x58\xad\xe7\x55\xdf\xf5\xfc\x96\x61\x3d\x17\x67\xc9\x2f\xb3\xb3\x0b\x1e\x7e\x1b\xf4\xbd\xb6\x3e\x6f\x86\xde\xd8\x4e\xf5\xfa\xf1\xe6\xa7\xc0\x9b\x87\x74\xde\x1c\x30\x4e\x0b\xc6\x7d\x71\xc1\x87\x37\xeb\xeb\x3d\x8d\x7b\x43\x7f\xde\x3c\xa8\xf3\x66\xf5\xdd\x2d\xa0\x3d\x73\x41\xdf\xdd\x02\xea\x19\x79\xb3\xba\xff\x08\xa8\x67\xe4\xcd\xea\xfe\x23\xa0\x9e\x91\x37\xab\xfb\x8f\xbd\xde\xf2\x83\xee\x7d\xe6\x9b\xce\x7c\xea\x7e\x39\xb8\x43\xde\x8c\xf1\xc7\xbd\xa7\xc3\x9b\x97\x18\x6f\x5e\x66\xbc\xf9\x4f\x18\x6f\x7e\x1d\xbc\x99\x16\xa8\x97\x37\xd3\xc1\xd7\xd9\x47\xc8\xaf\xd5\x3e\x32\x6a\xbd\x45\xed\x75\xf9\x6f\xd5\xaf\x22\xe2\xaf\xc5\xed\xf1\xc3\xff\x60\xfc\xac\xd1\xfb\x6d\x75\x5f\x32\xf7\xfe\xf8\x99\xba\x7f\x63\xed\x36\xf1\xb3\xc1\xa0\xfb\x3b\x43\x7d\xce\xcf\xe6\x76\x50\xbf\xe1\x7b\x43\x83\xdd\x1d\xdd\x1b\x06\xd8\x0d\xbc\x37\x0c\xa8\x17\x78\x6f\x68\x58\x37\x1b\x0d\xad\x9b\x1d\xf2\xb3\x25\xf8\x85\x7a\xaf\x71\x45\x7d\x57\x58\x06\x3f\x80\x9f\x74\x83\x4f\x94\x36\x35\x7f\x9b\x5c\x80\xdf\xb4\x91\x1f\x4e\xe2\xfb\x75\xf6\xe8\x77\x69\x5d\xbd\x06\x5e\xf6\xfc\x9b\x14\xd7\x0f\x51\x7b\x46\x9e\x20\x19\x6d\xa6\xfb\x9f\x32\xee\xd7\x47\x1e\x54\x78\x46\xca\xa7\xc1\x32\xa2\x82\x2e\x4a\x9f\x8e\x20\x1d\x21\x22\xa0\xe2\xfe\x68\x13\xfd\x89\xaf\xd7\x4e\xb9\x5c\x5d\xf7\x77\x8f\xd1\x7d\xd7\x68\xe8\x77\xa9\x7c\xdd\x7b\xbb\xdf\xa9\x8d\x73\xc4\x75\x8f\x75\x1c\xf7\x78\xea\x3e\xaf\x78\xc2\x79\x6f\x14\x96\xeb\x26\x81\xf1\xea\x67\xbc\xe7\x48\xad\x9c\x30\xdc\xef\xa7\x4a\xaf\x63\xdd\x4d\x20\xfd\x1d\xa4\x4f\x6a\xbc\xcd\xcb\xcb\x88\xd7\x75\x36\xeb\xed\x57\xe5\x92\xf8\xde\x36\x8d\xf2\x4e\xbd\x29\xd6\xbe\x82\x87\xb7\x8e\x19\xee\x4d\xed\x12\xce\xd1\x8b\xe0\x93\x78\x27\x51\x06\xdf\x9e\xc6\x77\x9e\x32\x2d\x03\xcf\x77\xf6\x32\x78\x7f\x54\x60\x1f\x54\xe9\x26\x22\x60\x65\xfa\x5c\x56\x9b\x7f\xa7\xfc\x1e\x2d\x3f\x99\x13\x7a\x7d\xc9\xd2\x74\xde\x58\x8d\x47\xea\x3b\x0e\xe7\x8d\xea\xfe\x9d\x9f\xb7\x55\xff\x7c\xfb\xb5\x47\xb7\x9b\x1e\x50\xfb\x0f\xf1\xda\x1b\x11\x8c\x2f\xde\x49\xf9\x8f\xff\x65\x36\xfe\x2f\x7b\xf8\xcf\x5c\x00\x7f\x8d\x88\x4f\x08\x5e\x7e\x21\xb0\xfc\x03\xb5\xf4\xcf\xc7\x9f\x17\x98\x3f\x2f\x69\xfe\x9c\x02\xff\xf7\xf3\x67\xef\xbd\xcb\x14\x5b\x27\x8d\xf9\xeb\x07\xf5\x07\x7e\x4e\xf8\x79\x8d\x9f\x3a\x0f\xd9\x8b\xd8\xcf\xbb\x73\xec\xbc\xc4\xcf\x79\xfa\xf7\x6a\xff\x78\x71\xc1\xd5\x7f\x57\xbc\xc0\xbe\x91\xc4\xf7\xf7\x69\xec\xef\x37\x20\xb3\x03\xb3\xac\xfd\x5f\xff\x99\x8d\x7f\x42\x8e\xf1\xdf\x6a\xe3\xe1\xbc\x23\xc0\xbb\x95\xbd\xfa\xbb\x09\xf5\xee\x81\x9f\xcf\xa2\xad\x7d\x9e\x77\x10\xa6\x77\x1a\xde\xf3\xd9\x43\xec\x7c\xf6\x71\x3a\x9f\xcd\xe2\x1c\x0e\xfd\xd9\x59\xbc\xb3\x99\x7d\x17\x7c\xa9\xfe\xfe\xff\xee\x0e\x78\x43\x33\xde\x15\xd4\x7b\xef\x56\x9c\x05\x8f\x9d\xc5\xbb\x95\x06\xce\x87\x66\xde\xa3\xf8\xc4\xa6\x2f\x9f\x30\x9d\x33\x8a\xb3\xf3\x18\x87\x71\x4f\x1c\x0b\xbe\x3f\xae\x77\x3e\x84\xde\xd8\x4e\xf5\xfa\x9d\x0f\x47\x10\x0f\xdf\x01\x5e\x9f\x97\x8f\x57\xfb\xdb\x82\xef\x5d\x1e\x7e\x3e\x0e\x7e\xfe\x93\x4a\x48\x8b\x0f\x78\x7f\x81\xef\x92\x9c\x6f\x14\x63\x09\x8d\xa7\xa7\xf1\x7e\xd6\x39\x67\xe2\xbc\x1f\x7b\x13\x72\x05\x52\xf1\x82\xeb\x90\xea\xbe\x5b\x7d\xbf\x79\x1d\x71\x12\xe7\xa0\x18\xbd\xef\x70\xbe\x3f\xbe\x0e\xff\xa8\x7f\x0e\x5d\x09\x38\x87\x9a\x78\xea\x9b\xee\xf7\x62\x8c\xa7\x3a\xef\xd1\x70\xaf\x57\xa2\xf5\xe2\xc4\xf7\xef\x79\xe2\xc9\x55\x23\xff\xd0\xe3\x9a\x7a\xcf\x3b\x0d\x19\x0d\x7d\x5b\xe2\xee\xf8\x52\x1d\xd2\x87\xf6\xd0\x7b\xdc\x54\x69\x55\xab\xef\x9c\xe7\xde\x10\xa6\x79\xa2\xb8\x63\x89\x87\xf6\xfc\x29\xf5\xd7\x15\xcf\xe6\x65\x3c\x1b\x33\xc6\x33\xfb\x0a\xe2\x04\xf6\x93\x88\x58\xbc\xcd\xfe\xf6\x92\x3c\x0f\xde\x3e\x7f\x53\xe7\xbe\x1b\x90\xeb\x90\x6f\x41\xae\x69\xfe\x74\xfb\xfc\xf3\x6d\x1f\xff\xac\x7f\xee\x5b\xfb\x80\xe7\xbe\xf5\x1d\xd6\xe7\xe7\xdd\x95\x80\xfa\x6a\x7d\x34\xb7\x7a\xcf\xb9\xab\x01\xe7\x39\x67\x9d\x6c\xf8\xac\x93\x7f\x6e\x70\x9d\xac\x82\x1f\xd0\xbc\x8c\x86\xf0\xbd\x1f\xfd\xa9\x7f\x5e\x6a\x85\x1f\xe3\x7b\xfd\x12\xcd\xff\x68\x13\x3d\xac\x2a\x1f\x80\x1e\xbc\xd3\x52\xef\xc4\x28\xaa\xb8\xce\x51\x91\x9e\x5a\xff\xc8\x4f\xf1\x2e\xee\x35\xf8\xe3\xf3\xce\xfb\xe4\x90\xeb\x3b\x5d\xfa\x44\x81\xf1\x23\x9d\xdf\xa4\x4a\xca\x0f\x2f\x20\xad\xfc\xf6\xeb\x48\xab\x7b\xb8\x39\x8d\x4f\x66\x63\x97\x98\xff\xbd\xe8\x19\xcf\x19\xe3\x78\x5e\xa8\x13\x77\xe8\x00\xeb\x8d\x3b\x74\x31\x9e\x2a\xcd\xf9\xc4\x1d\x8a\xa7\xfe\x71\xe7\x17\x69\xbc\x5d\x71\x67\x3c\x20\xee\x94\xf1\xf7\x5c\x9c\xb8\x43\x13\x3e\x82\x77\x36\x51\x8b\x1a\x30\xf2\x18\xd2\xe1\x0e\xe1\x1e\x2f\x6f\xfb\xee\xac\xd3\xbe\x16\x4f\xfb\x1a\x8d\x8b\x89\x00\x9e\xdd\xe4\xfa\x4f\x34\xf9\x63\x16\xf8\x5e\x4b\x03\x58\x87\xf2\x4f\x17\xb6\xcf\x80\x55\xeb\x5d\x70\xfd\xbd\xae\x27\x12\x4f\x8a\xff\x75\xbd\x41\x35\xfd\x6c\x49\x37\x22\x22\xb7\x4b\xc7\x7f\x12\x22\x3c\xd1\xac\xe3\xe7\x81\xb7\xb4\xe8\xf8\x20\xf0\x99\xb0\x8e\xff\xbb\x45\xf8\x55\xa6\xe7\x1f\x80\x4f\x30\x3d\xdf\x06\x3e\xc7\xda\x33\x89\x76\xae\xb0\xf2\x8f\x00\x5f\x63\x78\xab\xc2\x59\x7b\xfe\x0a\xfa\x45\xab\x8e\xff\x31\xf0\x0e\x86\xff\xa6\xec\x57\xab\xa7\xfd\xff\x6a\x11\xbe\xc9\xf0\xbf\x01\x7e\x8e\xb5\xe7\xcf\x80\x5f\x65\xf8\x4b\x61\xc2\x79\xbf\xfe\x12\xe5\x37\x58\xfb\xef\x93\xe9\x3b\xc4\x20\xe3\x8f\xff\x14\x22\x3c\xc1\xf0\xb3\xc0\x67\x22\x3a\x1e\x87\x9e\x85\x36\x1d\xb7\x80\x2f\x33\xfc\x0b\xd0\xb3\xa5\xc3\xe2\x11\xe0\x63\xcc\x6e\x49\xea\xd9\x2d\x86\x9a\x74\xfc\x0c\xf0\x79\xa6\xff\xf3\xc0\x37\x19\xbe\x17\xf8\x0a\xd3\xff\xc3\x10\xe1\x6b\x0c\x7f\x16\xf8\x38\xb3\x7b\x11\x7a\xae\x33\xfd\x29\x85\xb3\x79\xfc\x29\xf4\xf0\xf9\xcd\x00\xef\x64\xf3\xf5\x7b\xd0\xd3\xcf\xf4\xff\x3a\xf0\x7d\x77\xea\xf8\xc7\x80\x77\x30\xfc\x1d\xa5\x9f\xe1\xdf\x03\x9e\x63\xfd\x1d\x01\xbe\xce\xf0\x47\xa5\xfe\x76\x31\xc4\xe2\xd8\x87\x80\x8f\x31\xfc\xef\x42\x84\xaf\xb1\x71\xfb\x91\x45\xf8\x39\x36\x0e\xaf\x02\x5f\x65\xf8\x33\xd0\x33\xc4\xd6\xd1\x57\x60\x77\x83\xe1\xbf\x06\x7c\x93\xe1\x43\xd0\xb3\xcd\xfa\xd5\x0b\x7c\x9c\xb5\xff\xbc\xdc\x27\x3b\x05\xff\x3d\x20\xf1\xbd\x1e\xfc\x55\xb9\x4f\xde\xed\xc1\xef\x92\xf8\x87\x3d\xf8\x6f\x48\x3d\xbb\x3d\xf8\x27\x25\x7e\x87\x07\xff\xae\x8c\xdb\x61\x0f\x7e\x54\xe2\xcd\x1e\xbc\x59\xe2\xed\x1e\x7c\x59\xe2\x11\x0f\x3e\x28\xf1\x56\x0f\x7e\x49\xb6\xff\x43\x1e\xfc\x96\x6c\xe7\x1e\x0f\x1e\x95\xf8\xbd\x1e\xfc\x3b\x52\x4f\xd4\x83\xdf\x2f\xf1\x7b\x3c\xf8\x10\x64\x75\xba\xaa\x4c\xab\x9f\xa5\x73\x2c\x7d\xd5\x95\x7e\x54\x08\x31\xb6\xcb\x49\x1f\x16\x42\x6c\xb5\xe8\xf9\x6e\xfd\x87\x98\xfe\x43\x4c\x7f\x35\xbd\xc0\xf4\xaf\x86\xf5\xf4\x44\x8b\x6e\x6f\xc1\x95\x7e\x8c\xd9\xab\x96\x5f\x61\x69\x75\x7e\x57\xe9\xf5\xb0\xae\xaf\x27\xe2\xa4\x3f\x23\x84\x18\x8f\xe8\xf9\xab\xcc\xde\x78\x9b\x93\xae\xce\xed\x5c\x9b\x9e\x9f\x60\xf6\x07\x99\xfd\x79\x96\x56\xeb\x4c\xd9\x9f\x6f\x63\xf6\x99\xfe\xad\x3b\xf4\xf2\xb9\xdd\x7a\x7b\xc6\xf8\x78\x32\x7b\x5d\x21\x3d\xbd\xdc\xa4\xeb\xeb\x62\xed\x59\x69\xd5\xf5\x8b\x87\x0b\x99\x99\x82\xc8\x4e\x65\x0a\xb9\xa9\xd3\x5f\xca\x24\x93\x93\xa7\x32\x85\x64\x3a\x9f\x4d\xa6\xd2\xe9\x4c\xae\x20\x1e\x9e\xca\x9c\xac\x65\x7f\x92\xe7\xba\x2a\x16\xd2\xb9\xe4\x73\x07\x93\xe9\xd3\xa7\x4e\x65\xd2\x05\x91\x35\xc3\xba\x3a\x53\xa6\x31\x87\xdb\xe9\x33\xdb\xe9\x0b\xb2\xd3\xe7\x6b\xc7\xc9\x79\x36\x95\xcb\x57\xb1\xc2\x54\x2a\x9d\x99\x4a\xe6\x0b\xa9\xc2\xd9\xbc\x48\x3e\x97\x99\xca\x4f\x9e\x3e\xa5\x19\xcb\x67\x0a\x32\x3f\xc3\xd5\x39\x19\xee\xe2\xe9\x93\xa7\xf3\x9e\xa2\x04\x26\x4f\x4e\xa6\x33\xa7\xaa\xb9\xf9\xc2\x54\x21\xf5\x25\xf1\x70\xde\x7e\xb6\x2a\x9f\x3c\x7c\x38\x9e\xec\x7d\xa4\x2a\x0f\x26\xe3\x52\xee\x87\x8c\xd7\xd2\xfd\x28\xd6\x8f\x6c\xa4\x49\x1e\x4c\xc6\x0f\x01\x3f\x04\xfc\x50\xad\x93\xc9\xcc\x73\x99\x53\x85\xe4\x64\xee\xb9\x83\x84\x61\x14\xf2\xa7\xd3\x59\x17\x5a\x38\x9b\x3b\x99\xc9\x4d\x7e\x99\x20\xa9\x54\x8a\x3e\x12\xf1\x64\x1c\xe8\x81\xaa\x38\x40\xa2\x8f\xc4\xc1\x64\x2f\x50\x25\xe3\xc8\x26\xb9\x1f\x32\x5e\x95\xde\x76\xf5\x19\xdb\xd5\xe7\x6d\x57\x1f\x29\xef\x43\x9f\x91\x24\xd9\x07\x19\xaf\xe1\xfb\xf7\xa3\x4d\xfb\x29\x9f\x64\x1c\xf2\x60\x32\x8e\xfc\x38\xf2\x55\x7a\x7f\x2f\xca\xf7\xa2\x7c\x2f\xca\xf7\xa2\x3c\xd2\xfb\xe3\x28\x0f\xd9\x1b\x47\x79\xa4\xe3\x48\x93\x3c\x98\xdc\xdf\x83\xf2\x90\xbd\x3d\x34\x36\xbd\x48\xc7\x7b\xc4\x6d\xfa\x7d\x03\xdf\x19\xf8\x6f\x81\x9e\xb5\x89\x6f\xb1\x4c\x46\x03\x6a\xff\x7e\x05\x3b\x26\xe0\xdf\xac\xf0\xfe\x18\xad\x11\xb7\xea\xd4\x9f\x61\x38\xa3\x7b\xe2\xa6\xf0\x1c\x21\xe4\x6f\xfc\x53\x24\xf1\xb9\x4f\xc4\xf0\x1d\x4b\xd5\x57\xf8\x8f\x7c\xec\x5f\x87\xec\x6a\x0d\xb6\xff\x43\x1f\xfb\x39\xd8\x4f\xb8\xec\x47\x0c\xf6\x2f\xf9\xd8\x5f\x87\xd2\x7a\xfd\xff\x86\x8f\xfd\x15\x43\xff\x9b\x0d\xf6\xcf\xfa\xd8\x4f\x60\x5f\xe2\xe7\x39\x6e\xff\x8c\x8f\xfd\x35\xd8\x1f\x77\xd9\x6f\x35\xd8\xff\xbc\x65\xb6\xdf\x05\x4a\xc8\xcf\x09\xdc\xfe\xe3\x96\xd9\x7e\xcf\xa7\x49\xce\xb9\xec\xdf\x61\xb0\x5f\xf0\xb1\xbf\xfe\x11\x92\xf3\xbb\x83\xed\xe7\x7c\xec\xaf\xc0\xfe\x39\x97\xfd\xdd\x06\xfb\x0f\xf8\x8c\x7f\xee\xe3\x24\xb7\xeb\xf8\xdf\x2f\xfb\x8c\xff\x20\xd6\xaf\x7b\xfc\xdb\x0d\xf6\x7f\x3f\x44\xf6\x79\x0c\x98\xc0\xfd\x1c\x67\xe0\x7c\xfd\xfe\x97\x65\xae\xff\x42\x83\xf5\x4b\x3e\xf6\xe7\x1a\xac\xdf\xea\x53\x7f\xa9\xc1\xfa\xd7\x7c\xea\x5f\x6f\xb0\xfe\x2f\xf9\xd4\xff\x7e\x83\xf5\x3b\x7c\xc6\x6f\xa3\xc1\xfa\x5f\xf3\xa9\xff\xee\x01\x73\x79\x1e\xbf\x1f\xf4\xa9\xbf\xed\x53\x9f\xa7\xff\x10\xf7\xae\x9e\x1f\xfe\xfe\xec\xb8\xeb\x3c\xd1\xe7\xf2\x3f\x75\x42\xfc\xbf\x00\x00\x00\xff\xff\xbf\xac\x22\x25\x10\x49\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 18704, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

