// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x0f\x6c\x9b\xc7\x75\xbf\x8f\x7f\x24\x59\xa9\x2b\xba\x0e\x6d\x9a\x73\x3a\xb9\xe8\x5a\x4d\xc0\x3c\x52\xa4\x14\x4e\xcb\x00\xc2\x68\x13\x55\x75\x61\x2d\xad\x32\xd5\x89\x47\xd1\xb4\x62\xd9\xb2\x2d\x9a\xa4\x6d\xd1\xf4\x52\x3b\xe8\x1f\xd5\x4d\x16\x25\x73\x11\x4f\x2b\x16\xc9\x76\x16\xaf\xdd\x5a\xc3\x08\x50\xa1\xd9\x26\xef\x0f\x36\xa3\x48\x07\x6f\x08\x32\x61\x08\x36\x23\xcb\x3a\x2d\x4d\x32\xc1\xeb\x1f\xcd\xf0\xc2\x81\xf7\x7e\x47\x7e\xdf\xfb\xee\xa3\x68\x59\x5e\xd2\x84\x04\xba\xe7\xf7\xbb\xbb\xf7\xde\xdd\xbd\xbb\x77\xf7\xee\x53\xf6\x85\x4f\x6e\xbd\xd7\x65\x18\x42\xfd\x0c\xf1\x33\x51\xe1\x2a\xbf\x40\xbe\xf2\xef\x38\xfe\xef\x47\x84\x21\x66\xd7\x11\xf6\x25\x21\xc4\x07\x85\x10\x85\xe6\x85\x62\x89\xcf\x27\xd3\x12\x2f\x04\x17\x25\x3f\x7b\x86\xea\x35\xba\x84\x58\x28\x16\x8b\xb3\x67\xc1\xbb\x85\x58\x2c\x16\x8b\x01\xa6\xf4\xbb\x9e\x8a\x5c\x57\x89\x07\xfe\x75\xd0\xfc\xfa\x3e\xa6\x77\x40\xea\xf9\x2e\xe4\x14\x82\x7d\x36\xbd\x03\x1a\x3d\x5f\x92\x7d\x16\xc2\x2f\x5e\x20\xb9\x0d\x84\xd7\xd2\xce\x2d\x84\xd8\xdd\x28\x44\xab\x10\xe2\x08\x68\x7f\xe3\x45\x5b\xfb\xbe\x2a\x7a\x67\x1b\x89\xf7\x37\x7e\x8b\xf4\x1f\x04\x6f\xfc\x31\xf1\xd3\xe8\x97\x0b\xfd\x6a\xa7\xf1\xcc\x67\x88\xef\x77\x9d\x93\x72\xf2\x99\x26\xc9\xef\xf8\x10\x29\x2e\xd5\x77\xc9\xfa\xe9\x22\x8d\xc7\x18\xc9\x59\x05\x39\x93\x34\x4f\x85\xc9\x79\xd0\xab\xa0\x73\xa0\x57\x40\x2f\x83\x5e\x02\x9d\x01\xbd\x00\x7a\x1e\x74\x0a\xf4\x34\xe8\x04\xe8\x38\xe8\x71\xb2\xfb\xa0\x0f\xf3\x03\x3e\x13\x40\xbf\x7a\xa8\x5e\xfb\x38\xf0\x56\xe0\x71\xe0\x24\x2f\x9f\x6e\x23\xbc\x99\xf4\xe4\x0f\x85\x88\xdf\x4e\xfa\xf3\xb9\x18\x8d\xdb\x18\x79\x69\xe1\x24\xec\xec\x25\x3b\xf3\x63\x3d\x54\x9e\xe9\x13\x96\xfe\xb5\xa3\x7f\x27\xa9\x7f\xc9\x4c\x4e\x96\xa7\xda\x5f\x03\x3f\x06\x9e\xc6\x6b\x4f\xe6\x98\xe4\x47\xda\xdf\x00\xff\x08\xf8\xb7\x50\x3f\x8d\xfa\x57\x51\x7e\x1c\xe5\x0b\x28\xdf\x25\xf9\xdd\x2e\xf2\x9b\x64\x7e\x50\xf2\xdb\x9e\xa2\xf9\x49\xe6\x87\x89\x66\xf7\x51\x3d\x37\xd5\xdb\xf6\x7b\x98\xbf\x6e\xcc\x53\x3b\xcd\xd3\x90\xd1\x22\xe7\xdb\x6f\xb4\xc3\x7f\xe2\xe4\xd7\x86\x21\x71\xaf\x48\x90\x5f\xc0\x0f\x47\x82\xc3\xb2\x5d\xcb\x97\x89\x9f\x9d\x26\xda\x68\x08\x31\x5c\x2c\x16\x95\xff\xcc\xa6\x2a\xfe\x5a\x5a\x92\x7b\xa6\xa9\xdd\x48\x90\xfa\xe1\x15\x5b\xa1\xef\xe3\x72\x3d\xf8\x8d\xdf\x90\xf5\x4a\x7a\xbd\xb2\xbc\xcf\xa2\xb7\x00\xbd\xa9\xe0\x2e\xd2\x7f\xaf\xb3\xfe\x26\x8d\xfe\xfc\x41\x9a\xd7\xfc\x59\xd8\xbf\xd6\xde\x7e\x17\xda\x7b\x4c\xed\x76\x0b\xac\x53\xd0\xd2\x7a\xbc\x56\x2c\x16\x05\x7e\x3b\x7c\xe1\xb2\x9d\x86\xb4\xf3\x32\xfa\x17\xb2\xd8\x9f\x82\xfd\xf9\x69\xf2\xd7\x96\x75\xce\xf6\x7b\x34\xf6\x27\xa7\x55\xff\x5f\x83\xfc\x8f\xea\xe7\xa5\x61\xb9\xf3\xf2\x06\xe4\x6e\x70\xb0\x3b\x7e\x8b\x76\xcf\x43\xfe\x6a\xbd\xdd\x0f\x2c\xd7\xee\xb7\x20\x97\x36\xba\xe4\xf4\x2e\xe8\xbb\x6a\xdb\xc7\x17\x59\xfc\x48\x2f\x23\x7e\xbc\x53\x71\x6b\xa5\xe2\xd5\x2c\xfc\xc3\xdf\x40\xfb\x44\xad\xf1\x2a\xff\xb0\xb0\xd5\xaf\x16\x9f\xfc\xe2\x21\xc9\xe7\x51\xee\x37\xb6\x13\xef\x14\x97\xc0\xf7\xbb\xfa\x29\x2e\xb9\x54\x5c\xfa\xac\x10\xd5\xe2\x52\x79\x1c\x10\x97\xe0\x67\x05\xcc\x7f\x21\x88\xfd\x2e\x88\xb8\x84\xf5\x59\x08\x62\xdf\x0e\x22\x2e\x05\xb1\xdf\x07\x11\x97\x82\x88\x4b\x41\xc4\xa5\x20\xe2\x52\x10\x71\x49\xc5\x21\x17\xc5\xa5\xbc\x1b\xf1\xa8\x1b\xe5\xed\x28\x77\x53\x3c\xca\x7b\x10\x7f\x7a\x21\xaf\x1b\x71\xc9\x1d\x42\x79\x0c\xe5\xd0\xdf\x8d\xb8\xe4\xc6\xbe\xe5\xe9\x41\x39\xec\xed\xbe\x80\x72\xc4\x23\xd5\xaf\x6e\xea\x57\xd2\x83\x38\xd4\x8b\x38\xe4\x41\x1c\xea\x45\x1c\xf2\x20\x0e\xf5\x22\x0e\x79\x10\x87\x7a\x11\x87\x3c\x88\x43\xbd\x88\x43\x1e\xc4\xa1\x5e\xc4\x21\x0f\xe2\x8b\x07\x71\xc8\x4b\xfe\xb4\xed\x73\x98\x8f\xde\x39\xd4\xa3\xf8\x94\xf4\x22\x6e\x79\x11\x8f\x3e\x89\x7a\xdb\xd5\xbc\x0c\x83\x0e\x16\xc9\x0f\xee\x14\x25\x57\x9d\x7d\x0e\xfe\xd6\x28\xc4\x95\x62\xb1\xd8\xd2\x05\x3f\x34\xed\x13\x83\xd8\x27\x7c\xba\x7d\x7f\x9a\xe4\x15\xd6\x0b\xf8\x1f\xf4\xac\x27\xff\x5a\xe9\xfd\x21\xbf\x81\xfa\x9b\x5f\x47\xe3\x57\xf1\xcf\x36\xdb\x3a\x6d\xab\xe9\x7c\xd7\x20\x57\x46\xe5\x7c\xe7\x71\x09\xcb\x7e\xd0\x4a\xeb\x80\xba\x23\x46\x4e\x0e\xe0\xbc\x44\xfe\xa2\xc6\x43\x17\xef\x06\x4c\xfb\x6b\x65\x5f\xa5\xf6\xfd\xc6\x00\xad\xb7\x93\xf1\xa2\x55\xff\x13\x86\x5b\x96\xff\xb7\x3c\xfd\xe7\x0f\x92\xe2\xfc\x19\xb2\x63\xc7\xa6\x05\x43\xf5\x5b\xb6\x0f\xc2\x9e\xe9\x56\xcb\xfc\x56\xce\x93\xb7\xf7\xdc\x58\x98\x1c\x03\xc5\xbe\x31\x39\xcc\xce\x93\xc3\xec\x3c\x09\x3b\xb1\xcf\x54\xce\x93\x01\xe0\x63\x38\x2f\xaa\xf5\x7c\x9c\x9d\x27\x71\x0e\x4d\xf3\xf3\x24\xec\x6c\x9e\x70\x38\x4f\xa2\x7f\xed\xe8\xdf\xc9\x29\x76\x9e\x7c\x91\x9d\x27\xaf\xb0\xf3\xe4\x4b\xec\x3c\xf9\x32\x3b\x4f\x5e\x66\xe7\xc9\xb9\x15\x3a\x4f\x62\x9e\xda\x67\x70\x9e\x7c\x53\xce\x7b\xfe\x59\x1a\xc7\xfc\x39\x1a\x37\xbf\xd1\x60\x10\xf5\x19\xd6\xf3\xe5\x37\xcb\xfe\x22\xed\x0a\x86\x1c\xcf\x97\xa1\xaa\xe7\x81\x10\xce\x03\x73\x38\x0f\x3c\x6d\xac\xec\x7a\xf8\xba\xd1\x6c\x59\xcf\x21\xf8\x07\xf1\x7e\xd7\x67\x65\x9c\xec\x77\x4d\x38\xac\x8b\xc7\x6b\x5b\x17\x65\xf9\xb7\x37\x6e\xa9\xf8\x59\x08\xa6\x8b\xd6\x75\x80\x78\x96\x55\xf1\x0c\xe5\xed\x28\xcf\x22\x9e\x31\xff\x2f\x74\x63\x5d\x64\x11\xcf\x72\x2a\x9e\x41\x3f\xe2\x62\x3e\x8b\x78\x96\x53\xf1\x0c\xf6\x76\xe3\x5e\x96\x55\xf1\x0c\xfd\xea\xa6\x7e\x25\x73\x2a\x9e\x61\x1d\xe4\x54\x3c\xc3\x3a\xc8\xa9\x78\x86\x75\x90\x53\xf1\x0c\xeb\x20\xa7\xe2\x19\xd6\x41\x4e\xc5\x33\xac\x83\x1c\x8b\x67\x87\x78\x3c\x43\x5c\xcd\x21\x9e\x1d\x72\x8a\x67\x6a\x5e\x70\x2f\x0d\xc6\x11\xcf\x3e\x63\xf0\x78\x36\xe3\x10\xcf\xe2\x55\xe3\x59\x9c\xc5\xb3\x1e\xc7\x78\x56\x5a\x2f\x5e\x11\x33\xac\xf3\x1e\xb2\xd8\xc5\xcf\x4d\x23\xc1\xeb\xa0\x8b\xc0\x29\xfe\xa7\x82\x37\xb0\x8e\x68\x7e\xf8\x3a\x2a\xc5\x4b\x9f\x43\x3f\x9a\x2c\xf7\x30\xe7\xf6\x01\x87\xf5\x5e\x4b\x7b\x73\xbb\x85\x9b\xd4\xdb\xc4\xda\xcf\x6b\xdb\xb7\x2d\xa9\xf7\xba\x66\xff\xc8\x1f\x0c\x2d\xd9\x6e\x51\xdb\x8e\xd6\x8f\xee\xbe\x75\xb5\xa6\x7b\x2e\xcd\x9b\x4e\xdf\x0d\xcd\x3d\x37\x79\x96\xe6\x37\xd5\x7d\x8c\xd6\xc7\xf4\x22\xfc\xe0\x28\xf1\x67\xe0\x17\x2a\xfe\x9d\xc3\x39\xbb\x17\x71\x72\x0a\x7e\xd4\x8c\x7d\xe2\x8f\xe0\x5f\x7b\xb1\xcf\x3d\x0b\xbf\xdb\x4e\xfb\xdc\xec\x6f\x91\x3d\xdb\x76\x13\xf5\x37\xfe\x27\xd9\x79\x1f\xf0\xf2\xf9\xe7\x87\x44\x5d\xff\x4e\xd4\x78\x4d\xd2\xfe\x06\xba\xc8\xcc\xe2\xde\xb8\xbb\x01\xf7\x74\xd0\x80\x6c\x5f\xb9\xa7\xdf\x75\x98\x04\xf6\x8b\x3d\xd4\x2e\x8e\x76\xfc\x7e\xdf\x60\x6d\xb7\x63\x90\x06\x38\xd5\xbd\x55\x62\x47\xb0\x3f\xa4\x7a\x3f\x41\x3c\xd6\x7f\x6a\x3b\xf5\xf7\x15\xac\xdb\x11\xe4\xa5\x5e\x31\xc0\x07\x7b\x2d\xfb\xfd\x11\x03\xed\x34\xf7\xb7\x78\xd5\x7b\xd5\xa7\x24\xef\x15\xdf\xc2\x78\x84\x91\x3f\xf9\x75\x96\x3f\x99\x95\xe5\x3c\x5e\xa5\xb0\xde\x75\x79\x82\x50\x4d\x7e\x15\x72\xf4\xab\x85\x65\xe5\x4f\xa6\xca\x76\x1a\xa6\x7d\xdf\x2b\x9e\xb1\xd8\x9f\x52\xe7\x02\x4d\x9e\x20\x54\x35\xff\xa0\xfa\xfd\x22\xe4\x9e\xd2\xcb\xd5\xe4\x93\x6a\x93\x7b\x05\x72\xbf\x6a\x91\x3b\x52\x83\xdc\xea\xe7\x98\x97\x20\xf7\x11\xbd\xdc\x2a\xe3\x50\x5d\xee\xcb\x90\x9b\x25\xbf\x98\x0c\xb1\x73\x47\x4c\xeb\x8f\xe6\x7b\x11\xc5\x15\x4a\x08\x54\xfc\x1d\xfb\x02\xce\x3b\x47\x70\x9e\x4c\xe1\x1e\x5c\x59\x07\x47\x6d\xf2\xab\xe7\xd7\x29\x0e\x7b\xc5\x67\xd8\xbc\x0d\x5b\xfc\x59\xcd\xe3\x08\xe2\xd5\x08\xe2\x95\x8a\x73\x2a\xff\x94\x3f\x48\xe7\x9a\x6a\xfb\x71\x48\xe3\xc7\xf9\x83\xad\x4b\xb6\xd3\xf9\x7f\x2d\x71\xe3\xea\x32\xe3\xc6\x8d\x9b\x8c\x1b\xf1\x9a\xd6\x77\xdc\x71\x7d\xcf\xeb\xe2\xc6\xf4\x3c\xc6\x97\xf2\x6e\xc9\xb3\x98\x8f\xee\x87\x10\x47\x6e\x60\x3e\x76\x22\x8e\x60\x7e\xda\x29\x0e\x24\xcf\x61\x1d\xf5\x52\x9c\xf0\x23\x4f\xe2\x77\x7f\x9c\xa8\xeb\x63\x44\x8d\x5f\x62\xfe\x36\xe8\xe0\x6f\xc3\xcc\xdf\x76\xde\xa4\xbf\xd1\x05\x5f\xe5\xad\x5a\x9e\x24\x5a\xa0\x63\xb1\xf0\x8a\x3b\x89\x9f\x8c\xb3\x75\xd3\xa3\xd5\x63\x5e\x37\xba\x7d\xdd\x2b\xe8\xdc\x96\x9c\x56\x7e\x7c\x79\xc9\xf5\xa7\xb3\x7f\xa9\xbc\xc4\xca\xd9\x7b\x8d\xc6\x7d\x03\xf2\x87\xb8\x07\xaa\x7b\xe1\xdf\x81\xaa\xfc\xde\xfe\x8e\xb5\x94\xbf\x40\x3e\xa4\xd0\xbe\xdc\x3c\x48\x33\xcb\x83\x34\xdd\xd6\x3c\xc8\xee\x55\xe8\x0f\x68\xe5\x1e\xf8\x80\x43\x5e\xe4\x49\xe4\x45\x7e\xe2\x70\xff\xbb\xf6\x73\x9e\x17\x51\xf9\x0f\x9e\x17\x51\xf9\x12\xec\xff\xe5\x77\x36\x87\xbc\x88\xed\x9d\x0d\x76\xf6\xbe\xd7\xf3\x22\x3f\xc2\x3b\x9b\xca\x83\xac\x61\x79\x90\x6f\xdf\xa6\x3c\xc8\x1f\xac\x70\x1e\xe4\xf7\x6b\xcc\x83\x9c\x72\x58\x07\x4f\xd6\xf3\x20\xef\xeb\x3c\xc8\x6f\xbe\x43\x79\x90\x7b\xea\x79\x90\x7a\x1e\xe4\xe7\x20\x0f\xf2\x26\xd9\x69\xcb\x83\xbc\x4e\xd4\x45\x79\x12\xbf\x31\x2f\xe9\xf2\xf3\x20\xfb\xa9\x5d\xcd\x79\x10\x32\xf0\xdd\x93\x07\xf9\xb4\xe4\xbd\xe2\x3b\x18\x8f\x88\xc3\x77\x24\x7f\x2d\xcb\x1d\xf3\x20\x55\xee\xe7\xff\xbf\x79\x90\x73\x65\x3b\xad\x79\x90\xb3\x16\xfb\xd5\x3d\x37\x3f\x4d\xe7\x31\xdd\xba\xb8\xb9\x7c\xc8\xd3\x0e\xf2\x5b\x6f\x51\xbe\xca\x8b\x7c\xcd\x22\xbf\x7c\xae\xa9\x92\x7f\xaa\x2d\x2f\x72\x5c\x2f\xf7\x96\xf3\x22\x87\xc8\x4f\x26\x63\x45\x9d\xdf\x2c\x95\x17\xb1\xdf\x97\xe8\x82\x50\xcf\x93\x54\xda\xd5\xf3\x24\xef\xa5\x3c\x09\x9d\xb7\x2a\x79\x92\x26\xf8\xa1\xca\x93\xf4\xb0\x75\x14\xd7\xea\x79\xf7\xe4\x49\x56\xca\x5e\xca\x93\xcc\xe2\x7c\x5a\x91\x47\xfb\xa2\xca\x5b\xa8\xef\xb1\xf2\x47\xe8\x5c\x6e\xd6\x73\xa5\x5a\x5e\x04\x79\x0e\x7f\x13\x9d\x07\xf2\x27\x88\xef\x37\xfe\x43\xc6\x41\x95\x47\x48\x4d\xd2\x3e\xaf\xf2\x06\xf9\x13\xe4\xf7\xb3\x94\xfe\xd5\xfa\xef\x25\xdd\xb9\xef\x84\xf2\xfb\x4b\x8e\x7e\xff\xa2\xc6\xef\x47\x90\x7f\xc8\x9f\xe8\x59\x52\xef\x84\xf6\xde\x49\xed\xfb\x8d\x4f\x4b\x3c\x85\xfc\x46\x0a\xdf\x1f\xa7\xf0\x3d\xf2\x08\xf2\x25\x23\x93\xd8\xcf\x90\xdf\x48\xe1\xfb\xe4\xfc\x89\xc0\x92\xfa\xb5\xfb\xd2\x89\xd6\x25\xdb\xe9\xd6\x7b\xfe\x44\xdb\x92\xed\xe6\x74\xfb\xd2\x89\xd0\x92\xed\xb4\xfb\x19\xe6\xb5\x65\xbd\xbd\xfe\x98\x79\x3f\xcb\x56\xfc\xc8\x3a\xaf\x63\x8e\xf3\x7a\x55\xbb\x9f\xa9\xfb\xd0\x37\xb0\x9f\x61\x3e\xba\x4f\xb1\xfd\x6c\x12\xfb\x19\xe6\xa7\xfd\x34\xf6\x33\xac\x63\xdc\x8b\xfd\x9e\x09\xf2\x67\xf7\x13\x44\x5d\xbf\x4b\xd4\x78\x5c\xd2\xca\x7e\x46\xed\xd5\xf9\x36\xb5\x77\x8a\xed\x63\x93\xb6\xf5\x3a\x51\xe5\xbb\x46\xaf\xa0\x85\xb3\x72\x7e\x7a\x44\x58\xf3\x23\x33\xec\x7e\x39\x66\xb9\x67\x16\xca\x71\x98\xdf\x37\xe7\xac\xf7\xcd\x13\x7d\x5a\xbb\x74\xf7\xcd\x31\xed\xfa\x75\x6e\xcf\xef\x9b\xda\x7b\xa3\x43\xfb\x25\xef\x8b\x55\xf4\xf2\xfb\xe6\x55\x6d\xfb\xa5\xd7\x91\xf6\xbe\x59\xc3\x3a\xd2\xde\x37\xab\xac\xa3\xb9\x9a\xd6\xd1\xdc\x32\xef\x9b\xcf\xb3\xfb\xe6\x45\x76\xdf\xc4\xf7\x9e\xe7\xf0\x5d\xab\xfa\xbb\x84\x29\xf8\x51\x33\xbe\x17\x7d\x0e\xfe\x75\x14\xfe\xfc\x2c\xfc\x6e\x3b\xad\x9b\xd9\x01\xb2\x67\x1b\xa5\x8d\x84\xbf\x69\x13\xd9\xd9\x03\xbc\x1c\x57\x3e\x4c\xd4\x75\x17\x51\x63\xa3\xa4\xfd\x8d\xb8\x6f\xe2\xde\xca\xff\x8e\x25\x20\xdb\x9b\xee\x9b\x5f\x51\xf7\x4d\x3a\x68\x39\xde\x37\xd9\x3d\x75\x47\x9a\xf2\x6f\xa9\xee\x2f\xb2\xfb\xe6\x31\x76\xdf\x1c\x63\xf7\x4d\x7e\x8e\x7e\x94\xed\x17\xe3\xb6\xfd\x61\x4c\xe6\x87\x0a\x14\xf7\xa1\x5f\x9d\x07\x2a\x72\x2f\x30\x39\x33\x4c\xcf\xc5\x9a\xf6\x1d\xaf\x40\x9e\xc0\xf1\x3b\xd1\x26\x9b\x9c\xa6\x9a\xde\x47\x82\xec\x7d\x24\x20\x79\xf5\x1e\x52\x38\xd9\x67\x39\x77\x14\x9a\x45\x99\xf7\x4a\x9e\xce\x3d\x2b\xff\xfd\xa8\xaf\x68\xb5\xeb\x14\xde\x49\x3c\x2e\x6b\x7e\x98\xec\xd9\xb1\xc9\x70\x09\x6d\x7e\x58\x60\x5f\x7c\xb7\xbf\x93\xc0\x4e\xdb\x3b\xc9\xe2\xdb\x42\xd4\xbf\x1f\x5d\xfa\x9d\x64\x01\xdf\x8f\x0a\xec\x77\x34\x6e\x7e\x63\x15\xde\x4d\xd6\xb2\x77\x93\x17\x6e\xd3\xbb\xc9\xf9\x77\xe8\xfb\xd1\x69\x43\xbf\x2e\xfe\xd0\xe1\xdd\x84\xad\x8b\xfa\xbb\x89\x10\xef\x89\x77\x13\xbc\xb7\x06\x69\xff\xec\x77\xfd\x76\xcd\xef\x26\xbe\xaa\xef\x26\x24\xaf\xf2\x6e\x02\x3d\x8e\xef\x26\x9f\x72\x78\x37\x81\x9c\xdb\xf8\x6e\xe2\xab\xbf\x9b\xbc\x8f\xdf\x4d\xe0\x5f\x35\xbf\x9b\x5c\x27\x3b\x6d\xef\x26\x3f\x23\xea\xfa\x29\x51\xe3\x27\x92\x2e\xff\xdd\xe4\x00\xb5\xab\xf9\xdd\x84\xf6\x81\x54\xf7\x3d\x74\x7e\x2c\x9f\x63\xa3\xc4\x97\xcf\xb1\xd4\xbf\xca\x79\x33\xc6\xce\x97\xdd\x96\xfd\xbe\xf2\x6e\x62\xcf\x4f\xe9\xf2\xd0\x95\xbc\x1d\xfd\xdd\xad\xf3\xf7\x4d\x97\x30\x4e\x4e\xdf\x95\xfe\x40\x96\xbf\xfb\xbf\x2b\xfd\x76\xd9\x4e\xeb\x7b\xca\x9f\x5a\xec\x5f\xb9\xef\x4a\xcf\xe8\xe5\xde\xf2\x77\xa5\xd6\xf7\x99\x95\xfb\xae\xf4\x31\xbd\xdc\x5b\x7e\x3f\xa1\x7c\x4a\x61\x12\xe7\x7e\xf5\x2e\x1f\x6c\x65\xe7\x93\x80\xd6\x6f\xcd\x79\x55\x9f\x8c\x3f\x7b\x25\x6f\x7f\x3f\xc1\x3a\x58\xb1\xf7\x13\x3a\x1f\xd8\xdf\x4f\x5a\x2d\xfe\xed\xfc\x7e\x32\x80\xf2\xfa\xfb\xc9\x40\x4d\xeb\x7d\xc0\x71\xbd\x57\x7f\x3f\xd9\x48\xe7\xa8\xf2\xfb\xc9\x9d\x88\x37\x2a\xdf\x18\x44\xbc\x51\xef\x27\xe4\x67\x95\xf7\x13\xf2\x4b\xbf\x27\x2a\xf5\xf9\xdd\x11\xa2\xae\x0e\xa2\x46\x98\xf9\x5b\xc0\xc1\xdf\x5a\x99\xbf\x05\x6d\xfe\xe6\xab\xea\x6f\xb4\x51\x3a\xed\xc3\xe5\x75\xe3\xf3\xc1\x2f\xe9\xef\xe6\x0b\x93\x03\x6c\x5d\x0d\xb3\x75\x35\xa8\xb5\xe3\x66\xdf\x45\xf8\xdf\x79\x9b\xdb\xf7\x2c\xf3\x7d\x66\x39\x76\xd8\xdf\x67\x6e\x7e\x5f\xe1\xef\x35\xba\x79\xf1\x8a\x7f\x25\xb9\xf5\xbc\x4c\x3d\x2f\x53\xcf\xcb\xd4\xf3\x32\xf5\xbc\x0c\x95\xd7\xf3\x32\x54\xaf\x9e\x97\xb1\xf5\xa3\x9e\x97\xa9\xe7\x65\xea\x79\x99\x95\xce\xcb\x38\x7d\x4f\x55\xcf\xcb\x70\xbb\xeb\x79\x99\xe5\xe4\x65\x70\x9f\x75\xbc\x3f\xf9\xb4\x7e\x5b\xcf\xcb\xd4\xf3\x32\xef\xaf\xbc\x8c\x7e\x1f\x76\xce\xcb\x0c\xb2\x75\xc5\xf3\x32\x03\x5a\x3b\xde\x3b\x79\x99\x9b\xdf\x57\x6e\x26\x2f\x53\x82\xef\x14\x74\x96\xc4\xa7\xff\xf5\x1f\xc6\x25\x54\x1f\x17\xdb\x4f\xf9\x8b\x5c\xa5\xf5\x71\x29\xff\x94\xbf\xd4\xc7\xc5\xfa\x2b\x8d\x4b\x13\xfe\x87\x3f\x6d\xa8\xff\xea\xe3\xe2\xf8\x53\xe3\x32\x8e\x7f\xd7\x7f\xf4\x33\xfb\x4b\x7d\x5c\x2a\xbf\xfb\xfa\xb6\x8a\xb7\x8b\xc5\x22\x9e\xf7\x84\x71\xf4\x7e\xd1\x74\xec\x0e\xe3\x03\x88\xdd\x01\x53\xdd\x31\xd3\xbf\x37\x0a\x21\xa2\x26\x3e\xde\x60\x95\x5b\x2a\xff\x9c\x43\x5b\x55\x9e\x33\xf1\xe7\xdd\xf6\xf2\x53\x26\x7e\xde\x67\x2f\x7f\xde\xc4\xb7\xad\xb1\x97\xbf\x64\xe2\x03\x4d\xf6\xf2\x1f\x9b\xf8\xd3\x9a\xf6\x77\x1a\xce\xe5\x4e\x3f\x97\x1c\x07\xaf\x98\x60\xfd\xf9\x67\x0f\xe1\x69\xb6\x57\x1d\x05\xde\xe6\xb5\xe2\x3f\x76\x13\x1e\x63\x72\xce\x01\xbf\xc2\xe4\x7c\x0c\xf8\x38\x93\xf3\x1d\x17\xe1\x17\xb8\x3d\x5e\xc2\xaf\xb2\xfa\x7b\x81\x2f\x30\xfc\x23\xc0\x43\x6c\x9e\xe9\xbf\xa7\xb3\x4a\x9c\x66\xf2\xaf\xcb\xfa\x77\x88\x74\xb3\x15\xff\x47\x0f\xe1\x7d\x77\x58\xf1\x0c\xf0\xf3\x0c\x7f\xc3\x4d\x38\x1f\x87\x6f\x00\x17\x1f\xb0\xe2\x1f\x06\x3e\xc0\xf0\xe7\x5c\x84\x4f\x70\x7b\x60\x67\x8c\xf9\xd7\x4e\xe0\x3d\x0c\x0f\x02\x1f\x60\xf8\xf7\x61\xff\xe0\x6a\x2b\xfe\x34\xf4\x5e\x6e\xb1\xe2\x7d\xc0\xc7\x99\x9c\xbf\x82\xfc\x79\x56\xbf\x17\x78\x2b\xab\xdf\x0c\x7c\x8c\xe1\xdf\x84\x3d\xdc\x0f\xe3\xd0\x7b\x9a\xcd\xe3\x9f\x61\xdc\xa6\x56\x59\xf1\xbf\x47\xfd\x39\x86\xb7\x02\xbf\xc0\xc6\xf9\x0c\xec\x59\x60\xf8\x35\xd8\x73\x9a\xd9\xf9\xa8\xac\xbf\xda\x36\x2f\x7b\x3d\x84\xa7\x99\x3f\xbc\xe6\x26\xfc\x0a\xc3\x4f\x01\x1f\x60\xfd\x5d\x07\x3c\xc4\xec\x79\xc6\x45\xf8\x38\xc3\x07\x81\x5f\x60\xf6\x6c\x87\x9d\x7c\x9c\x3f\x04\xdc\x36\x8f\xb0\x7f\x8a\xf9\xc3\x13\x90\xdf\xc4\xea\xf7\x00\x6f\x63\xf8\x16\xc8\xe7\xeb\xf7\x87\xa8\xcf\xc7\xf3\x2b\xc0\x67\x18\x1e\x03\x7e\x99\xfb\x09\xe4\xcf\x30\x7f\x38\x86\x71\xbb\xc4\xe6\xfd\x0b\x90\xb3\xc8\xf0\x49\xc8\xb9\xca\xc6\xb3\x1b\x78\x88\x8d\xc3\x53\x18\x9f\x39\x66\xcf\x35\x59\xbf\xc5\x16\x0f\x3e\xe8\x26\xbc\xa9\xd1\x8a\x0f\xb8\x08\x8f\x33\xfc\xfb\x90\x73\x81\xe1\xf7\x03\xbf\xc4\xf0\x61\xc8\x19\x67\x7a\x57\x01\xe7\xfb\xdb\xeb\x52\xce\x1a\xd1\xc7\xf0\xa3\xc0\xb9\xfd\x0d\x6e\xc2\x2f\xb0\x71\xfe\x9e\x87\xf0\x19\x36\x9e\xaf\xa0\xfe\x02\xc3\x7f\xea\x22\x7c\x8a\xf9\xe7\xf7\xa0\xf7\x12\xc3\x5d\xc0\x8f\xb3\xf5\x72\x06\x7a\xe7\x18\xbe\x13\x38\x5f\x2f\x2f\xc2\x1e\xbe\x5e\x1e\x03\xce\xe7\xfd\x5f\x60\x27\x9f\xf7\x90\xb2\x9f\xe1\xf7\x43\x2f\x5f\x17\xcf\x43\x3e\xdf\x9f\x73\xc0\x8f\x33\xfc\x6f\x21\x7f\x82\xe1\x47\x94\x5e\x86\x07\x80\x73\x3f\x7c\x0a\xe3\xc6\xcf\x1d\x1d\xc0\x17\x19\xfe\x3a\xec\x0f\xb0\x73\xc2\x49\xe0\xfc\x7c\xb2\x05\x78\x8c\xe1\xaf\x4a\xf9\x6b\x6d\x7e\x95\x01\xce\xfd\xea\x6d\x17\xe1\xdc\xaf\x2e\x7a\x08\xe7\x7e\xf5\x92\x9b\x70\xee\x57\x6f\x41\x0e\xf7\xab\x8b\xd0\xcb\xfd\xea\x3a\xe4\x73\xbf\x9a\x04\xce\xfd\x6a\x3b\x70\xee\x57\x7f\x03\x7b\xb8\x5f\x7d\x11\x38\xf7\xab\x97\x61\x27\xf7\xab\x36\x65\x3f\xc3\x7b\xa1\x97\xfb\xd5\x9f\x40\x3e\xf7\xab\x7d\xc0\xb9\x5f\xfd\x05\xe4\x73\xbf\x1a\x55\x7a\x19\xee\x03\xce\xfd\xea\x24\xc6\x93\xfb\x55\x3b\x70\xee\x57\xaf\xc2\x7e\xee\x57\x8f\x02\xe7\x7e\xd5\x0d\x9c\xfb\x95\x90\x7f\x57\xec\xb6\x83\x12\xf7\x3a\xe0\x8d\x0e\xf8\x2a\x07\xfc\x0e\x07\x7c\xb5\x03\xde\xe2\x80\xeb\x0f\xdb\x6e\xb1\xd6\x86\xbd\x2a\xf3\xe9\x77\xd9\xf0\x1b\x32\x97\xf4\x61\x1b\xfe\xcb\x9e\x12\xbe\xc1\x86\x3f\x28\xbf\x27\x08\xda\xf0\x2f\x4b\xf9\x76\xfb\x5f\x90\xb8\xdd\xfe\x07\x25\x6e\x1f\x87\xaf\x4a\x7b\xec\xe3\xbf\x49\xe2\xf6\x71\xf6\x4a\x39\xf6\xfe\x86\x24\x6e\x1f\x9f\x51\x29\xc7\x3e\x8f\x8d\x12\xb7\xcf\xd7\x35\x89\x6f\xb4\xe1\x7e\x39\x3e\xeb\x6d\xf8\x7d\x72\x7c\x02\x36\xfc\x15\x29\xe7\x17\x6c\xb8\x21\xe5\xf8\x6d\x78\x44\xca\x59\x67\xc3\x7b\x54\x3b\x21\xc4\xef\x94\xce\x2b\x8c\x4f\x33\xfe\x82\x89\xff\x5a\xc9\x86\x06\x2b\x6f\x96\xf7\x08\x72\x8b\x66\x7e\x98\xf1\xa7\x99\xbc\x31\xb7\x95\x0f\xb1\xf2\x9e\xe6\x0a\x5f\x9a\xdb\xd8\xea\x0a\x7f\xb2\x74\x9f\x6d\xb1\x96\xab\x73\xbb\xe2\x87\x7d\x56\x79\x57\x7c\xd6\xf6\x7d\x4c\xdf\x30\xd3\x17\x58\x6d\xe5\xc7\x98\xfe\x79\xa6\x7f\x90\xe9\x3f\xcf\xf4\xfb\xd6\x58\xdb\xc7\x99\xfe\x71\xb7\xb5\x3d\x9e\x6f\xca\xf5\xf9\xf8\x0c\x9a\xec\x7d\x8c\xd9\xf7\x38\xb3\xaf\x54\x7e\xdc\x67\xe5\x2f\x99\xf8\xf1\x92\xba\x35\x56\xf9\xc7\xd7\x58\xe5\xbd\xd3\xfa\x37\x9a\xf4\x67\x98\xff\x66\x4b\xe7\x54\x13\x9f\x33\xe5\x43\x4a\xfc\x21\xe6\x7f\x87\x85\x10\x33\x26\xfe\x88\x10\x62\xce\xc4\x97\xda\x2e\x9a\xf8\x3c\xbe\x67\x50\xfc\xd1\xd2\x3f\x36\xe7\x86\xc6\x72\x62\x24\x33\x94\x4b\x67\x46\x77\x0e\x25\x12\xb9\x54\x3a\x71\xb8\x2b\x91\x1a\x3d\x70\x60\x28\x95\x13\x23\x7a\x78\x73\x66\x68\x5f\xb9\xd1\xaf\xea\x0a\xb5\x25\x5c\x4f\x54\xaf\x27\x5a\x4d\x4f\xd4\x51\x4f\xa5\x64\x7f\x32\x9d\x2d\x61\xb9\x4c\x32\x35\x94\x49\x64\x73\xc9\xdc\xa1\x2c\xa1\xfb\x92\xb9\xa1\x6c\x2e\x91\xcb\x8a\xc4\xe1\xa1\x4c\x76\xcf\xe8\x81\xb2\xee\x43\xbb\xd2\x89\xcc\x50\xea\xf0\xfe\xec\x6e\xb3\x6c\x33\x6c\xae\x9a\x1d\x3a\xb0\x4b\x53\x55\xc1\xe6\x1e\x69\xaa\x9a\x61\x73\xd5\xd4\xbe\xa1\xe4\x81\x43\xe9\x44\x66\xe7\xa1\x87\x79\x7d\x4b\x99\xb5\xd1\x68\x76\xc8\x5e\xbb\x04\x26\xf6\xed\x49\x0d\x1d\x40\xe9\xe6\xa1\xe1\xc4\xc3\x99\xe4\xfe\x21\xb1\x39\x9b\xcb\xe4\x92\x3b\xc5\xe6\x6c\x7e\x7f\x89\x6e\xdd\xb2\xa5\x2b\xf1\x6b\x25\x12\x4b\x44\x25\xbd\x1b\x34\x0a\x1a\x4b\x44\x80\x13\xed\x04\x8d\x96\xf9\x0e\xf0\x44\xbb\x12\x61\xe0\x61\xf0\x31\x88\x8f\x41\x7c\x8c\x8a\x15\x8d\x80\x76\xc4\x20\x06\x7c\x18\x3c\xd1\x30\x68\x24\x71\x37\xc4\xdd\x0d\x71\x77\xc3\x5a\xe0\x11\xe0\x44\x3b\x41\x63\x89\x0e\xe0\x1d\xe0\xc3\xe0\x89\x76\x81\x76\x82\x46\x41\xc3\x25\x2a\x1d\x48\xce\x71\x2e\x99\xcb\x26\xf6\xa4\x0f\x77\x95\x5d\xcd\x86\xc1\x17\xb3\xa3\xa9\x11\x42\xc9\xda\x2e\x58\xdb\x85\xce\x03\x8f\x00\x8f\x00\x0f\x77\x41\x7b\x17\xb4\xab\xf6\x9d\x68\xdf\x89\xde\x76\xa2\x3d\xf0\x08\xf8\x0e\xf0\x44\x3b\x13\x61\xd4\x27\x1a\x2e\x51\x7b\x6f\xa2\x9a\xde\x44\xb5\xbd\x89\x92\x96\xce\x28\x69\xe9\x04\x1f\x05\x1f\x05\x1f\x01\x4f\xb4\x33\x11\x8e\xc2\x8a\x28\xac\x50\x72\x22\x90\x13\xa1\x7a\x44\x63\x89\x08\x70\xa2\x51\xd0\x58\xa2\x03\x78\x07\xea\x77\xa0\x5c\xd1\x70\x04\xf2\x51\xbf\xb3\x03\xf2\x3b\xa8\x9c\x68\x2c\x11\x01\x1e\x01\x4e\xb4\x33\xd1\x01\x9e\x68\x18\x34\x96\xe8\x0c\x43\x4e\x18\x76\x82\x46\xc2\x68\x1f\x26\x1f\xea\x00\xde\x01\x9c\x68\x18\x34\x96\x08\x43\x4e\x18\xf5\xc2\xc0\x3b\x43\x90\x1f\x82\xfc\x10\xec\x05\x1f\x0d\xc1\x6e\xd4\x8b\xa0\x9c\x68\x57\xa2\x03\x3c\xd1\x30\x68\x2c\x11\x46\xfd\x30\xea\x85\x51\x2f\x8c\x7a\x61\x15\x17\x6f\xf5\xf7\x3f\x86\xd0\xde\x1e\x9a\xf0\xdf\x9b\x69\x66\xf7\x4f\xfe\xc6\x62\xe0\x7f\xac\x5a\xf9\x9c\xc1\x7f\xfc\x49\xef\x2f\x97\x68\xcf\xdf\x17\x58\xba\x5f\xfc\xb9\xcc\x52\xdb\x7f\x33\xa3\x44\xd5\xb5\x6b\x13\xfe\xfb\x4b\xaa\xbd\xc2\xcf\x39\xe8\x57\x71\x9a\xbf\x7f\x70\xfd\x53\x0e\xfa\x2f\x8f\x5a\xfb\xb1\x09\x7f\x5f\xc3\xf5\x7f\xde\x41\xff\x22\x80\xa5\xfa\xdf\xef\xa0\xbf\x29\x6d\xd5\xb3\x09\x77\x06\xae\xff\x1e\x07\xfd\x69\x5c\x5d\x78\x5e\x82\xeb\x8f\x39\xe8\x0f\x40\xbf\xb9\xff\xab\x34\xfa\xb3\x86\x5e\x7f\x00\x57\x2d\x7e\x9f\xe6\xfa\x47\x0d\xbd\xfe\x01\xe8\x4f\x9b\xf4\xdf\xa1\xd1\x7f\xd6\x41\xbf\x3a\xf8\xf1\x7b\x38\xd7\xff\x8c\x83\xfe\xcb\x50\x7c\xdc\xa4\x7f\xb5\x46\xff\x3f\x38\xe8\x6f\xfb\x15\xa2\xfc\x7d\x8b\xeb\xff\x81\x83\xfe\x1e\xfc\x9d\x55\xc8\xa4\xbf\x45\xa3\xbf\xc7\x41\x7f\xbc\x93\x28\x7f\x1f\xe3\xfa\x3f\xe1\xa0\x7f\x0c\xfa\xcd\xfd\x5f\xa3\xd1\x7f\x97\x83\xfe\xb9\x7b\x6b\xd3\xbf\xc1\x41\xff\xa2\x46\xff\x5a\x8d\xfe\x1b\x6e\xd2\xcf\xf7\xc0\x34\x0e\xf6\xfc\xfb\x30\xbe\x7f\x6d\x76\x68\x3f\xfe\xf9\xda\xda\xfb\x3c\xfa\xf6\x53\xdb\x6b\x6b\xbf\xc5\x41\xff\xcc\x83\xb5\xb5\xff\xa8\x83\xfe\x2b\x0f\xd5\xd6\xfe\x01\x07\xfd\xf3\x3b\x6a\x6b\xff\x4f\x42\xdf\x1e\xff\x6f\xc0\x97\x6c\xff\xa6\x43\xfb\xc0\x60\x6d\xed\xff\xcd\xd0\xb7\x0f\x25\xf5\xf5\x79\xfc\xfb\x5f\x07\xfd\x51\x87\xf6\x9c\xff\x2f\xe8\x77\x31\x3c\x86\xf6\x21\xa6\x90\xfb\xff\x8f\x9c\xd6\x1f\xfe\x9e\x6c\x02\x7c\xc9\xff\x7f\x51\xe3\xff\x86\xcb\xae\xbb\xf4\x1b\xde\x49\xb4\xcf\x74\xbf\x2e\x98\xda\xab\x8c\xd1\xff\x05\x00\x00\xff\xff\x5d\x3f\x2b\x6c\x98\x81\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 33176, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

