// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x0f\x6c\x9b\xc7\x75\xbf\x8f\x7f\x2c\x39\x8e\x2a\x65\x0e\x6d\x99\x49\x36\xb9\xe9\x10\x95\x5d\x3d\x52\xa2\x1c\x46\x6d\x01\xae\x69\x5a\x4d\x75\x61\xb6\x8e\x32\xd7\x89\x47\xd1\x14\x6d\x79\xf2\x1f\x8a\xa4\x1c\x7d\x65\xb6\x5a\x18\x92\xa9\xee\x06\x68\x69\x0b\x78\x1e\x86\x5a\xb1\xb3\x7a\xe9\x80\x09\xdb\x80\x7a\x08\x36\x79\x58\x80\x78\xe8\x3f\xad\xed\x56\x0d\xcb\x00\x61\x6e\x31\x01\xe9\x3a\xa1\x2d\x56\xaf\xf5\xc6\xe1\xbb\xf7\x3b\xf2\xfb\xde\x77\x9f\x48\xdb\x72\x97\x36\x1f\x81\xf6\xf9\x7e\x77\xf7\xde\xbb\x7b\xef\xee\xdd\x7b\xa4\xe3\x8f\x3f\xb6\xe7\xfd\x01\xc3\x10\xea\x63\x88\x1f\x8a\x46\xab\xf1\x89\x9f\x6c\xfc\x39\x8d\xff\x7f\xab\x30\xc4\xe2\x36\xc2\x9e\x15\x42\xbc\x45\x08\x51\xbd\x6b\xad\x66\xb5\xcd\x5c\x51\xe2\xd5\xe8\x75\xd9\x5e\x7c\x81\xc6\xb5\x05\x84\x58\xab\xd5\x6a\x8b\x17\xd0\x0e\x0a\x71\xbd\x56\xab\x75\x33\xa1\x5f\x08\x35\xf8\x06\xac\x36\xf0\xcf\x80\x9a\xdb\x33\x4c\xee\x7e\x29\xe7\x0b\xe0\x53\x8d\x66\x5c\x72\xf7\x6b\xe4\x3c\x2b\xd7\x2c\x44\x44\xbc\x4c\x7c\x37\x11\xde\xca\xbc\xa0\x10\xe2\x48\x9b\x10\x3d\x42\x88\xa7\x41\x47\xda\xfe\xdc\x35\x3f\xb3\x8e\xdc\xc5\x36\x6a\x47\xda\x3e\x4f\xf2\x27\xd1\x36\xfe\x84\xda\xf3\x58\x57\x00\xeb\x8a\xd1\x7e\x9a\x25\x6a\x8f\x04\x2e\x4a\x3e\x66\xa9\x5d\xb6\x0f\xfe\x1c\x09\xb6\xc6\x07\xe4\xf8\x62\x8d\xf6\x63\x9a\xf8\x6c\x06\x9f\x73\x64\xa7\xea\xb9\x55\xd0\x15\xd0\x65\xd0\x25\xd0\xab\xa0\x57\x40\x2f\x83\x2e\x80\x5e\x02\x3d\x0f\x7a\x16\x74\x0e\x74\x16\xf4\x34\xe9\x3d\xd9\x05\xfb\xa0\x5d\xea\xc6\xba\x86\x68\x5c\x6c\x16\x78\x0f\xf0\x34\x70\xe2\x67\x16\x7b\x09\xbf\x8b\xe4\x98\x53\x71\x6a\x1f\x20\xf9\x66\x25\x45\xfb\x36\x4d\x5e\x5a\x3d\x03\x3d\x87\x49\x4f\x73\x7a\x88\xfa\x4b\x19\xe1\x58\x5f\x0c\xeb\x3b\x43\xeb\xcb\x95\x2a\xb2\x3f\x1f\xfb\x16\xda\xd3\x68\xd3\x7e\x1d\x2d\x3d\x23\xdb\x13\xb1\xef\xa0\xfd\x5b\x68\x7f\x17\xe3\x8b\x18\xbf\x82\xfe\xd3\xe8\x5f\x43\xff\x98\x6c\x1f\x09\x90\xdf\xe4\xcc\x51\xd9\xde\xfb\x3c\xd9\x27\x67\x8e\x13\x2d\x1f\xa3\x71\x41\x1a\xb7\xf7\x53\xb0\xdf\x20\xec\x14\x23\x3b\x15\x8c\x4e\x69\xef\x88\x11\x83\xff\xa4\xc9\xaf\x0d\x43\xe2\x61\x91\x25\xbf\x80\x1f\x4e\x44\xc7\xe5\xbc\xce\xe7\xa8\xbd\x38\x4f\xb4\xcd\x10\x62\xbc\x56\xab\x29\xff\x59\xcc\x37\xfc\xd5\x3a\x92\x47\xe7\x69\xde\x44\x94\xd6\x11\x16\x7b\x20\xef\x21\x79\x1e\x22\xc6\x7b\xe4\x38\x4b\x6e\x58\xf6\x67\x1c\x72\xab\x90\x9b\x8f\x8e\x91\xfc\xf7\x7b\xcb\x6f\xd7\xc8\x37\x27\xc9\xae\xe6\x05\xe8\xbf\xd5\x3d\x7f\x0c\xf3\x43\xb6\x79\x47\x04\xce\x29\xa8\x75\x1e\xbf\x57\xab\xd5\x04\x3e\x07\xbb\x12\x75\x3d\x0d\xa9\xe7\x55\xac\x2f\xee\xd0\x3f\x0f\xfd\xcd\x79\xf2\xd7\xce\x6d\xde\xfa\x87\x34\xfa\xe7\xe6\xd5\xfa\xbf\x05\xfe\x6f\xd3\xdb\x65\xd3\xad\xda\xe5\x3b\xe0\xbb\xc3\x43\xef\xf4\x6d\xea\xbd\x0a\xfe\x1d\x7a\xbd\x9f\xb8\x55\xbd\xbf\x0b\xbe\x74\xd1\xe5\xe6\xc7\x20\x6f\xc5\x75\x8f\x5f\x67\xf1\xa3\x78\x0b\xf1\xe3\xff\x2b\x6e\x6d\x54\xbc\x5a\x84\x7f\x44\x36\xd1\x3d\xd1\x6a\xbc\x32\x0f\x0b\xd7\xf8\xf5\xe2\x53\x44\x3c\x25\xdb\x26\xfa\x23\xc6\x01\x6a\x7b\xc5\x25\xb4\x47\x02\x23\x14\x97\x02\x2a\x2e\xed\x13\x62\xbd\xb8\x54\xdf\x07\xc4\x25\xf8\x59\x15\xf6\xaf\x46\x71\xdf\x45\x11\x97\x70\x3e\xab\x51\xdc\xdb\x51\xc4\xa5\x28\xee\xfb\x28\xe2\x52\x14\x71\x29\x8a\xb8\x14\x45\x5c\x8a\x22\x2e\xa9\x38\x14\xa0\xb8\x64\x06\x11\x8f\x06\xd1\x1f\x43\x7f\x90\xe2\x91\x19\x42\xfc\x19\x06\xbf\x41\xc4\xa5\x60\x1c\xfd\x29\xf4\x43\xfe\x20\xe2\x52\x10\xf7\x56\x68\x08\xfd\xd0\x77\x70\x01\xfd\x88\x47\x6a\x5d\x83\xb4\xae\x5c\x08\x71\x68\x18\x71\x28\x84\x38\x34\x8c\x38\x14\x42\x1c\x1a\x46\x1c\x0a\x21\x0e\x0d\x23\x0e\x85\x10\x87\x86\x11\x87\x42\x88\x43\xc3\x88\x43\x21\xc4\x97\x10\xe2\x50\x98\xfc\x69\xef\xe3\xb0\xc7\xf0\x32\xc6\x51\x7c\xca\x85\x11\xb7\xc2\x88\x47\x8f\x61\xdc\x01\x65\x97\x71\xd0\xd1\x1a\xf9\xc1\xbd\xc2\x72\xd5\xc5\xcf\xc1\xdf\xda\x84\x58\xaa\xd5\x6a\x9d\xbb\xe1\x87\xb6\x7b\x62\x14\xf7\x44\x97\xee\xde\x9f\x27\x7e\xd5\xed\x02\xfe\x07\x39\xdb\xc9\xbf\x36\xfa\x7e\x30\x77\xd0\x7a\xcd\x6d\xb4\x7f\x0d\xff\x4c\xb9\xce\x69\xaa\xa5\xf7\xdd\xb7\xe5\x88\xc6\xfb\xee\x9a\x21\x1c\xf7\x41\x9c\xce\x01\x2d\x47\x4c\x9c\xc9\xe0\xbd\x44\xfe\xa2\xf6\x43\x17\xef\x32\xb6\xfb\xb5\x71\xaf\xd2\xfc\x11\xe3\x09\x3a\x6f\x67\xd2\x35\xa7\xfc\xa8\x11\x94\xfd\x5f\x93\xaf\x7f\x73\x92\x04\x9b\x2f\x90\x1e\x07\x77\x7e\xd5\x50\xeb\x0e\xd8\xee\x27\x73\x3e\x0e\xfb\xee\x67\xef\xc9\x3b\xf3\x5e\xac\x9e\x9b\x06\xc5\x7d\x71\x0e\x76\x3f\x37\xca\xde\x93\xa3\xec\x3d\x09\x3d\x63\xe3\xec\x3d\xd9\x0b\xbc\xc8\xde\x93\xd3\xec\x3d\x79\xda\xe3\x3d\x09\x3d\x87\x67\x3d\xde\x93\x58\x5f\x0c\xeb\x3b\x73\x96\xbd\x27\x5f\x61\xef\xc9\xab\xec\x3d\xf9\x25\xf6\x9e\xfc\x0a\x7b\x4f\x5e\x61\xef\xc9\xa5\x0d\x7a\x4f\xc2\x4e\xb1\x05\xbc\x27\x1f\x32\xe8\x3d\xb9\xc7\x20\x7f\x39\x64\x38\xdf\x93\x9f\xac\xfb\x87\xb0\xbd\x07\x75\xef\xc9\xb5\x75\xe3\xff\x1a\xe2\xff\x12\xe2\xff\xb4\xb1\xb1\xfe\x7f\xca\xb8\x4b\x13\x5f\x54\xfe\x14\x09\xec\x93\x71\x71\x24\x30\xe9\x71\x0e\x4e\xb4\x76\x0e\xea\xfc\xef\x4c\x7c\x52\x71\xb2\x1a\x2d\x6a\xef\x59\xb3\x84\xf8\x55\x56\xf1\x0b\xfd\x31\xf4\x97\x11\xbf\x2a\x2a\x7e\x81\xdf\x20\xce\x41\x19\xf1\xab\xa2\xe2\x17\xe4\x0f\xe2\x1c\x94\x11\xbf\x2a\x2a\x7e\xb1\xf8\x57\x56\xf1\xcb\x19\xf7\x72\x15\x15\xbf\xe0\xf7\x15\x15\xbf\xe0\xf7\x15\x15\xbf\xe0\xf7\x15\x15\xbf\xe0\xf7\x15\x15\xbf\xe0\xf7\x15\x15\xbf\xe0\xf7\x15\x16\xbf\xa6\x78\xfc\x42\x3e\x57\x41\xfc\x9a\xf2\x8a\x5f\xca\x2e\xc8\x43\xa3\x69\xc4\xaf\x5d\x06\x8f\x5f\x0b\x1e\xf1\x2b\xbd\x6e\xfc\x4a\xb3\xf8\x35\xe4\x19\xbf\xac\xf3\x12\x16\x3b\x0c\xa7\xdd\xd7\x1c\x7a\xf1\xf7\xd1\x44\xf4\x47\xa0\xd7\x81\x53\xdc\xce\x47\x6f\xe0\x1c\x91\x7d\xf8\x39\xb2\xe2\x63\x97\xc7\x3a\xda\x1d\x79\x97\xf7\xfc\x6e\x8f\xf3\xde\xca\x7c\xfb\xbc\xd5\x9b\x94\xdb\xce\xe6\xaf\x68\xe7\xf7\x36\x95\xfb\x23\xcd\xfd\x61\x4e\xc6\x9b\xce\xbb\xae\x9d\x47\xe7\x47\x97\x5f\x2d\xb7\x94\xd7\x92\xdd\x74\xf2\x6e\x68\xf2\xda\xdc\xfc\x0d\xd8\xb9\x82\x7b\x49\xf9\x07\xee\xa9\x17\xe1\x37\x07\xe8\x9e\xda\x1b\x21\x7e\x47\xe7\xaf\xc3\x5f\x4a\x74\xae\x5e\x80\xff\xa8\xb8\x78\x01\xef\x6e\xdc\x23\xe6\x45\xf8\xdb\x30\xdd\x27\x91\xf0\x17\x25\x9f\xbd\x8f\x12\xbf\x48\xf0\xef\x89\x06\xae\x12\x35\x5e\x95\xf4\x35\x9c\x87\x3a\x5f\xdc\xab\x4f\x23\x4e\xe5\x63\xe4\xdf\xaf\x19\x18\x07\x7d\x5a\xcf\x4f\xfe\x58\xb6\xc3\xe2\x43\x92\x36\xf2\xdd\x51\xec\xcb\x2a\xa8\x8a\x33\xcb\xa0\x37\x1c\xe7\x49\xe5\x99\xe6\x64\x77\x53\xbb\xaf\x69\xec\x60\x4e\xf6\x34\x9d\xb7\xaa\x9d\xd7\xdc\x3f\x97\x6f\xd1\x3f\x6f\xdc\xa4\x7f\xa6\x5b\xf2\xcf\xb4\xa7\x7f\xae\x68\xfd\x73\x05\xfb\xfb\x14\xdd\xc3\x17\x60\x8f\xc1\xc7\xc9\xef\xe0\xbf\x13\xd1\x03\xf0\x43\xd8\x27\x46\xfe\x9a\xbb\x48\x76\xcb\x0f\x93\x3f\x47\x90\xef\x44\x82\x55\xf8\xdb\xc7\xe0\x6f\x26\xf3\xb7\xfd\x1e\xfe\x36\xca\xfc\xed\xc0\x4d\xfa\x1b\xe2\x28\xfa\x3b\x7f\x9f\x68\x95\xc2\xaf\x08\x8b\x71\xe8\x93\x40\x3d\xec\x03\xac\x1e\x36\xe6\xf0\x53\x75\xaf\x2b\x3f\xd5\xd5\xc3\xd6\x5a\xb2\xcb\x9a\xa7\x5d\x74\x7e\xd7\xbc\x1e\xf6\x58\x5d\x4f\xc3\x16\xd7\xc3\xe2\x7d\xa4\xf7\xb9\x34\x7b\xf7\x0c\x69\xf7\xd1\x9e\x87\xa5\x35\xfb\x1a\xc6\xb7\x09\x8d\x73\xbb\xe6\x78\x5f\xe9\xfc\x74\x6d\xdd\x3a\x95\xda\xcf\x57\xa0\xef\x2e\x07\xff\xfa\x3b\x55\x53\x5f\x6b\xed\x9d\xfa\x25\xf0\x7d\xd0\x43\xef\xde\xdb\xd4\x5b\xd5\x1d\xb7\xeb\xf5\xd6\xd4\xd7\x5a\xd3\xfb\x2b\xe0\x7b\xf7\x06\xdb\x8f\xde\x2f\xb9\x79\x75\xcf\x5e\x71\xf1\x49\x33\x3e\xba\xf3\xd5\x3c\x1f\x47\x9d\x0b\xf9\x8a\xca\x5f\x5e\x05\x55\x75\xa8\xe3\x7d\x6b\x94\x67\x23\x6f\xaf\xc6\x6e\x35\x5f\xff\x77\x96\xaf\x7f\xfb\x8e\xe6\xeb\x47\x36\x63\x3d\xa0\x7e\xfe\xee\xe7\xef\xc2\xcf\xdf\xfd\xfc\xdd\xcf\xdf\x31\xce\xcf\xdf\x85\x9f\xbf\xfb\xf9\xbb\x9f\xbf\x83\xfa\xf9\x3b\x1f\xef\xe7\xef\x37\x93\xbf\xd3\xbd\xdd\xc8\xdf\xdb\xe1\x87\x6f\x96\xfc\x7d\x88\xbd\x7b\xd2\xda\x7d\xf4\xf3\xf7\x9b\xd5\xfb\x27\x95\xbf\x6f\x94\xfd\x7e\x32\xf9\xfb\x22\xde\x4d\x0d\x7d\x69\x9f\x54\x3e\xad\x7e\xcf\x62\x3e\x4d\xef\x45\xbb\xfc\xab\xeb\xe5\xeb\xc8\xbf\x23\xed\xff\x48\xf3\x67\xa8\x3d\x62\x7c\x5d\x9e\x5f\x95\xdf\xe6\xcf\x91\x3f\xa9\x7c\xd6\x9c\xa1\x7b\x74\xb1\x4c\xfd\xba\x73\x77\x59\xf7\x1e\x99\x51\xe7\xf5\xb2\xe7\x79\x7d\x45\x73\x5e\x27\x90\x17\x9b\x33\x43\x4d\xe5\xce\x6a\xf3\xa1\x59\xe4\x43\xc3\x12\xcf\x23\xef\xce\xe3\x77\x9b\x79\xfc\x8e\x73\x02\x79\xfc\xc4\x39\xc4\x47\xfc\xce\x33\x8f\xdf\x75\x9a\x33\xdd\x4d\xe5\x6b\xe3\xdc\x4c\x4f\xd3\x79\xba\xf8\x61\xce\xf4\x36\x9d\xb7\xa4\x8b\x73\x33\xf1\xa6\xf3\xb4\xf1\x11\x76\xed\xdc\xee\x1e\xef\xb8\x87\xcb\x0d\x3f\x72\xda\xd5\xfb\x1e\x5e\xd6\xc6\x47\xf5\x4e\xff\x34\xe2\x23\xec\x31\xf8\xbb\x2c\x3e\x3e\x8f\xf8\x08\xfb\xe0\xf7\xac\x39\xbc\xcb\xf2\xc8\xd7\x5a\x8f\x8f\x34\xff\xe9\x4d\x88\x8b\xbf\x71\x96\xc5\xc5\xe7\x5d\xe7\x78\x56\x7b\xfe\x8f\x0b\xb1\xa1\xfe\x39\x26\x9c\xf9\xfa\x02\xcb\x77\xd6\x1c\x79\x4f\xb5\xfe\x9e\xe3\xf9\xcf\x92\x33\xff\x99\xc9\x68\xf5\xd2\xe5\x3f\xda\xfc\x65\x9d\xf9\x3c\xff\xd1\xe6\x31\x1e\xf3\x9b\xe6\x2f\xeb\xc8\xe5\xf9\xcf\xb2\x76\x7e\xf3\xf3\xa3\xcd\x7f\x5a\x38\x3f\xda\xfc\x67\x9d\xf3\xb3\xd4\xd2\xf9\x59\xba\xc5\xfc\xe7\x4f\x11\x7f\x95\x7f\xc0\x1f\x5f\x84\xdf\x1c\x98\xf3\xc8\x7f\x5e\x62\xf9\x0f\x7e\xe7\x8d\x3c\xac\xfe\xfb\xbb\x8b\xf0\x37\xd4\x3d\x22\xe1\x4e\xc9\xa7\x91\xff\xd0\xef\x59\x23\x01\x8a\xaf\x11\x63\x8b\xa4\x8d\xf3\x76\x89\x9d\xb7\x05\x76\xde\x5e\x6a\xe9\xbc\xa9\xdf\x61\xb6\xfe\x7b\xb3\x6e\x17\xdf\xee\x96\xea\xd7\xff\xc5\xea\xd7\x3f\xa0\x3a\x18\xe2\x65\xf5\xcc\x90\x23\xfe\x56\xef\xea\xaa\xb7\xc3\xb2\x4d\xef\x89\x8d\xff\x1d\x5a\x4f\x4d\x68\xeb\xd8\x2b\xac\x7e\x47\xfa\x1c\xdc\xf9\xaf\x1e\xf5\xbb\x2e\xf8\xc9\x1b\xbd\x8e\x0d\x3d\x5d\x75\xec\x76\xe0\x7e\x1d\x7b\xfd\x3a\xf6\xdb\x51\xc7\xce\xa0\x8e\x7d\x98\xd5\xb1\xff\xe0\x0e\xd5\xb1\x9f\xdb\xe0\x3a\x76\xb9\xc5\x3a\xf6\xc7\x3d\xce\xc1\x33\xad\x9d\x03\xbf\x8e\x2d\xc4\xcf\x44\x1d\x1b\xdf\x73\x45\xe9\xbe\x1c\x09\xbc\xbb\xe5\x3a\x76\xcf\xba\x75\x6c\xe2\xd7\xa8\x63\x43\x8e\x67\x1d\xfb\x21\x8f\x3a\x76\x0f\x7b\xd7\x6d\x7c\x1d\xbb\xc7\xaf\x63\xff\x14\xd7\xb1\x95\x7f\xdc\xe9\x3a\xf6\x3f\x4b\x3e\x8d\x77\xdc\x37\x89\x06\xfe\x89\xa8\x41\x75\x01\x77\x1d\x9b\xee\xcd\x8d\xab\x63\xbf\x24\xdb\xee\x3a\x76\x1c\xfb\xd2\xac\x8e\x9d\x41\xbf\x5f\xc7\xce\xb4\xe4\x9f\x19\x4f\xff\x5c\xbf\x8e\xfd\x4b\x74\x0f\xd7\xeb\xd8\x6f\x23\xbf\xab\xe7\xe9\x31\xf8\xa1\xaa\x63\xd3\xfd\xd8\xa8\x63\x93\x5f\x47\x42\x67\xe0\x6f\x9f\x80\xbf\xcd\xc2\xdf\x7e\x87\xf9\x5b\xaf\x87\xbf\xc5\x99\xbf\xc5\x5c\xfe\xd6\xb3\xae\xbf\xbd\x95\xf6\xc1\xe3\x77\x68\xf5\xef\x91\xba\xba\xe0\x97\x79\xe8\xd7\x8f\xba\xf6\xaf\xb2\xba\x36\xcf\x3b\xde\xa8\x75\xed\x0f\xd7\xf5\x74\xd6\xb5\xd5\xbb\x57\xbd\x8b\xd2\x8e\x77\x49\x63\x5d\xfb\xb5\xfb\xdc\xac\xbe\x19\x16\x8f\x38\xf6\xa7\x51\x2f\x26\xbb\xde\x7e\x9d\x3b\xe5\xe0\xbf\x71\x75\xee\x77\x7a\xe8\xdd\x7e\x9b\x7a\xab\x3a\xf7\x4e\xbd\xde\xb7\x5d\xe7\xde\x06\x7b\xf6\x30\x7b\xc6\x99\x3d\x7b\xb5\xf7\xb4\xdd\x9e\xba\x73\xc4\xeb\xd5\xf6\xf9\x43\x1b\x54\x37\x6f\xc5\xaf\x6e\xfd\xef\xa1\xf9\x75\x01\xe1\xd7\x05\xfc\xba\x80\x5f\x17\xf0\xeb\x02\x7e\x5d\xc0\xaf\x0b\xf8\x75\x01\xd7\x3c\xbf\x2e\xe0\xd7\x05\xfc\xba\x40\x63\xfe\x9b\xab\x2e\xa0\xff\x7d\xdb\x9b\xb7\x2e\x80\xdf\x13\x7a\xd6\x05\xdc\xff\xfd\x1d\xbf\x2e\xf0\x46\xae\x0b\xf4\x32\x7b\xf2\xba\x40\x8f\xf6\x9e\xfe\x59\xa9\x0b\x58\xc3\xef\x15\xf4\xb6\x11\x21\xe1\x7f\xf0\xb1\xf6\x25\xee\xef\x8b\xeb\xa3\xfc\x45\xde\xfa\xfe\xbe\xd4\x3f\xca\x5f\xfc\x7d\x71\x7e\xac\x7d\x69\xc7\xff\xfc\x7d\x69\x7c\xfc\x7d\xd1\x7f\xd4\xbe\xcc\xe2\xcf\xfe\x87\x3e\x76\x7f\xf1\xf7\xa5\xf1\xf9\x40\x66\x8f\xf8\xdf\x5a\xad\x86\xaf\x2b\x85\xf1\xb1\x8f\x88\xf6\x67\xb6\x18\x77\x23\x76\x77\xdb\xc6\x4e\xdb\xfe\x7c\xbf\x10\x22\x69\x6b\xa7\x37\x39\xf9\x5a\xfd\x8f\x7b\xcc\x55\xfd\x15\x5b\xfb\x52\xd0\xdd\xff\x69\x5b\x7b\xae\xd3\xdd\xff\x97\xb6\xf6\x15\x4d\xff\x37\x6c\xed\x9e\x36\x77\xff\x0f\x6c\xed\xee\x2e\x77\xff\xbd\x86\x77\xbf\xd7\xe7\x83\x56\xb2\x26\xc2\x62\x8e\xad\xa7\x1c\x22\xbc\xc8\xee\xaa\x07\x81\xf7\x86\x9d\xf8\x1f\x05\x09\x4f\x31\x3e\x23\xc0\x97\x18\x9f\x57\x03\x84\xcf\x32\x3e\x73\xc0\x17\x18\x9f\x77\x40\xcf\x15\x36\xfe\x1a\xf4\x59\x63\xf8\x5f\x00\x8f\x33\x3b\x9f\x95\xfc\x37\x8b\xb3\x8c\xff\xa3\x72\xfe\x16\x91\xbe\xdb\x89\x4f\x84\x08\x2f\x76\x38\xf1\xfb\x80\xf7\xbe\xc5\x89\x7f\x26\x08\x9c\xf1\xff\x10\xf0\x25\xc6\x67\x31\x40\xf8\x2c\xe3\x33\x0b\x7c\x94\xe9\xf3\x20\xf4\x8c\x33\xff\xf9\x17\xe8\x93\x66\xf8\xe7\x81\x67\x18\xbe\x0f\xf8\xe5\xcd\x4e\x7c\x1c\x72\x7b\x98\xdc\xb7\x03\x3f\xcd\xf8\x6c\x81\x3e\x3d\x6c\x5d\x2f\xab\x7d\x63\xe3\x3f\x09\xfc\x34\xdb\x9f\x21\xb5\x0f\xcc\x5e\xdf\xc7\xbe\xad\xb0\xfd\x79\x5d\xf2\xe9\x10\x45\xa6\xe7\x56\xe0\xe7\x99\x3e\xbf\x17\x24\x7c\x3f\xe3\xf3\x98\xc2\x99\x3e\xf4\xdf\x05\xe9\xa0\x2f\x33\x6d\x9f\xd3\xc0\x2f\x33\x3c\x01\x7c\x8e\xe9\xf3\x75\xe8\x33\xca\xf6\xe1\x82\xd2\x9f\xe1\x1f\x04\xbe\xca\xec\x32\x0a\xfe\x19\xc6\x7f\xa7\xc2\xd9\x7a\x83\x61\xc2\xf9\x39\x7a\x27\xd6\xcb\xed\xf8\x59\xf0\x39\xcf\xf0\x34\xf0\x05\x86\x6f\x56\xfb\xc0\xec\x75\x1c\xfc\xbb\xb8\x9f\xc8\x75\x75\x8a\x76\x76\xaf\x3d\x1b\x24\xbc\x8b\xe1\x8f\x04\x08\x3f\xcf\xf4\x7f\x97\x5c\xd7\x3d\x62\x9c\xed\x43\x3e\x44\xf8\x25\xbe\x0f\xc0\x47\x99\xbd\x7e\x33\x48\x78\x9a\xf1\x7f\x0f\xf0\x76\x36\xfe\xcf\x02\x84\x5f\x61\xf8\x34\xf0\x59\xa6\xcf\x7d\xd0\xf3\x32\xdb\x87\x2f\x42\x9f\xab\x0c\xff\x43\xe0\xcb\x0c\x7f\x14\xf8\x12\xf3\x87\xfd\x90\x9b\x62\x72\x77\x00\x1f\x62\xfb\xf0\x63\xf0\xe1\xf7\xde\x2f\x62\xbd\xe7\x99\x1d\x7f\x1b\xe3\xbb\x99\x3e\xfd\xc0\xb9\xdf\xbe\x0e\x3e\xdc\xaf\x0a\xc0\xaf\x33\x3c\xa2\xf6\x99\xc5\xa9\x7e\xb9\x6f\x5b\x5d\xf6\x7d\x32\x44\x38\xb7\xef\x8f\x83\x84\x73\xfb\x4e\x01\xe7\xf6\x1d\x00\xce\xed\xfb\xb9\x00\xe1\xdc\xbe\x45\xe0\xdc\xbe\x5b\xa1\x27\xb7\xef\xdf\x41\x4f\x6e\xdf\x4f\x01\xe7\xf6\x7d\x17\x70\x6e\xdf\x0c\xe4\x72\xfb\xde\x03\x9c\xdb\xf7\xfb\xe0\xc3\xed\xfb\x00\xd6\xcb\xed\x5b\xc5\x78\x6e\xdf\x77\x00\xe7\xf6\xbd\x06\x3e\xdc\xbe\x07\x81\x73\xfb\x76\xa8\x7d\xd6\xbc\x43\x82\x22\xe8\x06\x25\x1e\xf6\xc0\xdb\x3c\xf0\xcd\x1e\xf8\x16\x0f\xbc\xc3\x03\xef\xf4\xc0\xef\xf1\xc0\xb7\xba\xb0\x7f\x93\x75\xf7\x07\x5c\xf8\x0d\x59\x23\xf8\x79\x17\xfe\x35\xf9\xfd\xe4\x0e\xf7\x78\x59\xe7\x8f\xba\xf0\xe7\x24\x7f\xb7\xfe\x2f\x4b\xdc\xad\xff\x93\x12\x77\xef\xc3\x27\xa4\x3e\xee\xfd\xdf\x29\x71\xf7\x3e\x87\x25\x1f\xf7\x7a\xe3\x12\x77\xef\xcf\x49\xc9\xc7\x6d\xc7\x36\x89\xbb\xed\xf5\x3d\x89\xdf\xef\xc2\xff\x46\xee\xcf\x76\x17\xbe\x2a\xf7\xa7\xdb\x85\xbf\x26\xf9\xdc\xe7\xc2\x5f\x92\x7c\x22\x2e\xfc\x1b\x92\xcf\x36\x17\x3e\x04\x6a\x3d\xa5\x0f\x0b\x81\x2a\x7a\xa3\x5d\x64\xed\x05\x5b\xdb\xca\x0f\xba\x36\x39\xdb\x76\x7e\x47\x50\x33\xb2\xb7\xc7\x59\xfb\x2c\xe3\x37\x1d\x74\xb6\xe3\xac\x7f\x6e\x73\xa3\x2d\xff\x6a\xdd\xdd\x8d\x76\xc9\x8a\x13\x1d\xce\xb6\x3a\xef\x6a\xfc\x68\xa7\x93\x5f\x86\xf1\xbf\xc2\xf8\xc7\x19\xff\x59\xc6\x7f\x88\xf1\x9f\x63\xfc\xd3\x8c\xff\x6c\xd0\x39\xff\xfa\x26\x26\x8f\x8d\xbf\x64\xd3\xe7\x94\xb5\x1e\x9b\x3e\x53\x96\xbc\x0e\x67\xdb\xbe\x3e\x6b\xfc\x79\x5b\x7b\xd2\xf2\xa7\xce\xf5\xf7\xf7\x4e\xcb\xbb\xdf\x26\xef\x49\xe6\x6f\x4f\x59\xf6\xb3\xb5\x0f\xda\xf2\x52\xab\xfd\xeb\xcc\x5f\xb2\x42\x88\xcb\xb6\xf6\xa8\x10\x62\xd9\xd6\xce\x59\xfb\x6b\x6b\x1f\xc2\xf7\x61\xaa\x2d\xbf\x42\xd9\x55\x29\x4c\x57\xc4\x44\xa9\x50\x29\x96\x4e\x1e\x2a\x64\xb3\x95\x7c\x31\x7b\x6a\x77\x36\x7f\xf2\xc4\x89\x42\xbe\x22\x26\xf4\xf0\xae\x52\xe1\x58\x7d\xd2\x2f\xeb\x3a\xb5\x3d\x5c\x4e\x52\x2f\x27\xb9\x9e\x9c\xa4\xa7\x9c\x46\xcf\xf1\x5c\xb1\x6c\x61\x95\x52\x2e\x5f\x28\x65\xcb\x95\x5c\x65\xaa\x4c\xe8\xb1\x5c\xa5\x50\xae\x64\x2b\x65\x91\x3d\x55\x28\x95\x8f\x9e\x3c\x51\x97\x3d\x35\x56\xcc\x96\x0a\xf9\x53\xc7\xcb\x47\xec\xbc\xed\xb0\x7d\x68\xb9\x70\x62\x4c\x33\x54\xc1\xf6\x15\x69\x86\xda\x61\xfb\xd0\xfc\xb1\x42\xee\xc4\x54\x31\x5b\x3a\x34\x75\x98\x8f\x77\xf4\x39\x27\x9d\x2c\x17\xdc\xa3\x2d\x30\x7b\xec\x68\xbe\x70\x02\xbd\xbb\x0a\xe3\xd9\xc3\xa5\xdc\xf1\x82\xd8\x55\xae\x94\x2a\xb9\x43\x62\x57\xd9\x3c\x6e\xd1\x3d\xef\x7d\xef\x40\xb6\xff\x11\x8b\xa6\xb2\x7d\x92\x3e\x0c\x3a\x00\x9a\xac\xb7\x13\x92\xee\xce\xa6\x30\x2d\x45\xdd\x44\x53\xd9\xbe\x14\xa6\xa3\xbf\x0f\xfd\x7d\xe8\x4f\xa0\x3f\x81\xfe\x04\xfa\x89\x26\x40\xfb\xb3\x0f\x83\xfd\xc3\x98\xf6\x30\xa6\x01\x27\x9a\x04\x4d\x58\x54\x5a\x58\x1a\xa1\x92\xab\x94\xb3\x47\x8b\xa7\x76\xd7\x7d\xc1\x85\xc1\x59\xca\x27\xf3\x13\x84\x4a\x29\xc9\xdd\x24\x25\x89\x76\x3f\xda\x44\x07\x40\x53\xd9\x04\xf0\x04\x70\xa2\x49\xd0\x04\x68\x2a\x9b\x1c\x00\xbf\x01\x1a\x47\x34\x95\x4d\x00\x27\xba\x1b\x74\x00\x34\x09\x9a\xb0\xa8\x7b\x55\x49\xcd\xaa\x92\xda\x55\x25\xa1\x45\x12\x5a\x24\x89\x7b\x12\x78\x02\x38\xd1\xdd\xa0\x03\xa0\x49\xd0\x04\x68\x2a\x9b\xec\x07\x9f\x7e\x98\x1a\x6d\xa2\x03\xa0\x49\xd0\x54\x36\x81\xfe\x04\x70\xa2\x09\xd0\x54\x36\xd9\x07\x7e\x7d\x70\xa1\x3e\xf0\x05\x4e\x74\x00\x34\x09\x9a\xa8\xb7\xfb\x13\x18\x9f\xc0\xf8\x04\xc6\x27\x30\x3e\x81\xf1\xc0\x13\x18\xdf\x1f\x87\x55\xe3\xb0\x6a\x1c\xfc\xe2\xe0\x87\xfe\x3e\xe0\x44\x13\xa0\xa9\x6c\x02\xfd\x09\xf4\x27\xd0\x9f\x50\x01\xe5\x36\x3f\xff\x6d\x08\xed\xab\x79\xf9\x28\xd1\x7d\xec\xc9\xc5\x6b\xc6\x06\xfe\xc7\xd2\x80\x7a\x3c\xe6\x1f\xfe\x15\xc5\xdf\x36\x99\xcf\xeb\xa5\xed\xac\xfd\xd7\xb2\xea\xa6\xd1\x1f\xff\xae\x90\x4a\x13\x76\xe2\xef\xb9\xab\xf9\x0a\xbf\xe8\x21\x5f\xc5\x3b\x5e\xcf\xe5\xf2\xcf\x7b\xc8\x5f\x3d\xec\x5c\xc7\x4e\xfc\x5e\x9d\xcb\xff\xa8\x87\x7c\xf5\x5e\x69\xb6\xfe\x11\x0f\xf9\xbd\x47\x9c\x72\x76\xe2\xad\xcc\xe5\xbf\xdb\x43\x7e\x11\x4f\x76\x5e\x8f\xe6\xf2\x53\x1e\xf2\x53\x90\x6f\x5f\xff\x66\x8d\xfc\xb2\xa1\x97\xdf\x8d\x14\x83\xd7\xbb\xb9\xfc\x93\x86\x5e\xfe\x34\xe4\x8f\xda\xe4\x6f\xd1\xc8\xbf\xe0\x21\xff\x12\x52\x25\x5e\x4f\xe7\xf2\x3f\xeb\x21\x7f\x59\x23\xbf\x43\x23\xff\x1f\x3c\xe4\x8f\xd3\x3f\x9b\xe7\xaa\xd7\x73\xf9\x5f\xf6\x90\x9f\x42\x02\x10\xb7\xc9\xef\xd4\xc8\x1f\xf2\x90\x3f\x4b\xff\xfc\x9c\xab\xde\xcf\xe5\xbf\xcf\x43\xfe\x38\xe4\x17\x6d\xf2\xef\xd1\xc8\x7f\xc0\x43\xfe\xf9\x5f\x69\x4d\xfe\x0e\xaf\xfd\xd7\xc8\xdf\xaa\x91\xff\x62\x90\xe4\xf3\x3b\xf0\xf2\x87\x21\x9f\x5d\x78\xfc\xfe\xfa\x6a\x40\x3f\x7f\xe9\x23\xad\xcd\xff\x2b\x0f\xf9\xab\xfb\x5a\x9b\x7f\xcd\x43\xbe\xbc\x18\x5a\x98\xff\x65\x0f\xf9\xdd\x4f\xb4\x36\xff\x87\x1e\xf2\xe3\xbf\xd6\xda\xfc\x6f\x0a\xfd\xfc\xa1\xfd\xad\xcd\xff\x0f\x8f\xf9\xa3\x1f\x6d\x6d\xfe\x35\x43\x3f\x7f\xfa\x80\x7e\x3c\x8f\x7f\xff\xe3\x21\xff\x19\x8f\xf9\xbc\xfd\x9f\x90\x1f\x60\xf8\x69\xcc\x8f\x33\x81\xdc\xff\x5f\xf7\xf0\xff\x21\xc4\xef\x39\xb4\x2d\xff\xff\x05\x8d\xff\x1b\x01\xb7\x6c\xeb\xb3\xf0\x24\xd1\x5e\xdc\xc3\x96\x1a\x63\xb6\xf9\xaa\x52\xf2\x7f\x01\x00\x00\xff\xff\x0c\x2e\x8a\x4a\xb0\x77\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 30640, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

